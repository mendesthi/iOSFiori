// # Proxy Compiler 18.9.4-973a4d-20181128

import Foundation
import SAPOData

internal class B1ClassFactory {
    static func registerAll() throws {
        B1ClassMetadata.ComplexTypes.accountCategoryParams.registerFactory(ObjectFactory.with(create: { B1PreAccountCategoryParams(withDefaults: false) }, createWithDecoder: { d in try B1PreAccountCategoryParams(from: d) }))
        B1ClassMetadata.ComplexTypes.accountSegmentationCategoryParams.registerFactory(ObjectFactory.with(create: { B1PreAccountSegmentationCategoryParams(withDefaults: false) }, createWithDecoder: { d in try B1PreAccountSegmentationCategoryParams(from: d) }))
        B1ClassMetadata.ComplexTypes.accountSegmentationParams.registerFactory(ObjectFactory.with(create: { B1PreAccountSegmentationParams(withDefaults: false) }, createWithDecoder: { d in try B1PreAccountSegmentationParams(from: d) }))
        B1ClassMetadata.ComplexTypes.accountSegmentationsCategory.registerFactory(ObjectFactory.with(create: { B1PreAccountSegmentationsCategory(withDefaults: false) }, createWithDecoder: { d in try B1PreAccountSegmentationsCategory(from: d) }))
        B1ClassMetadata.ComplexTypes.accrualTypeParams.registerFactory(ObjectFactory.with(create: { B1PreAccrualTypeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreAccrualTypeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.activityInstanceParams.registerFactory(ObjectFactory.with(create: { B1PreActivityInstanceParams(withDefaults: false) }, createWithDecoder: { d in try B1PreActivityInstanceParams(from: d) }))
        B1ClassMetadata.ComplexTypes.activityInstancesListParams.registerFactory(ObjectFactory.with(create: { B1PreActivityInstancesListParams(withDefaults: false) }, createWithDecoder: { d in try B1PreActivityInstancesListParams(from: d) }))
        B1ClassMetadata.ComplexTypes.activityLocationParams.registerFactory(ObjectFactory.with(create: { B1PreActivityLocationParams(withDefaults: false) }, createWithDecoder: { d in try B1PreActivityLocationParams(from: d) }))
        B1ClassMetadata.ComplexTypes.activityParams.registerFactory(ObjectFactory.with(create: { B1PreActivityParams(withDefaults: false) }, createWithDecoder: { d in try B1PreActivityParams(from: d) }))
        B1ClassMetadata.ComplexTypes.activityRecipient.registerFactory(ObjectFactory.with(create: { B1PreActivityRecipient(withDefaults: false) }, createWithDecoder: { d in try B1PreActivityRecipient(from: d) }))
        B1ClassMetadata.ComplexTypes.activityRecipientListParams.registerFactory(ObjectFactory.with(create: { B1PreActivityRecipientListParams(withDefaults: false) }, createWithDecoder: { d in try B1PreActivityRecipientListParams(from: d) }))
        B1ClassMetadata.ComplexTypes.activityStatusParams.registerFactory(ObjectFactory.with(create: { B1PreActivityStatusParams(withDefaults: false) }, createWithDecoder: { d in try B1PreActivityStatusParams(from: d) }))
        B1ClassMetadata.ComplexTypes.activityTypeParams.registerFactory(ObjectFactory.with(create: { B1PreActivityTypeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreActivityTypeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.additionalExpensesParams.registerFactory(ObjectFactory.with(create: { B1PreAdditionalExpensesParams(withDefaults: false) }, createWithDecoder: { d in try B1PreAdditionalExpensesParams(from: d) }))
        B1ClassMetadata.ComplexTypes.addressExtension.registerFactory(ObjectFactory.with(create: { B1PreAddressExtension(withDefaults: false) }, createWithDecoder: { d in try B1PreAddressExtension(from: d) }))
        B1ClassMetadata.ComplexTypes.adminInfo.registerFactory(ObjectFactory.with(create: { B1PreAdminInfo(withDefaults: false) }, createWithDecoder: { d in try B1PreAdminInfo(from: d) }))
        B1ClassMetadata.ComplexTypes.advancedGLAccountParams.registerFactory(ObjectFactory.with(create: { B1PreAdvancedGLAccountParams(withDefaults: false) }, createWithDecoder: { d in try B1PreAdvancedGLAccountParams(from: d) }))
        B1ClassMetadata.ComplexTypes.advancedGLAccountReturnParams.registerFactory(ObjectFactory.with(create: { B1PreAdvancedGLAccountReturnParams(withDefaults: false) }, createWithDecoder: { d in try B1PreAdvancedGLAccountReturnParams(from: d) }))
        B1ClassMetadata.ComplexTypes.alertManagementDocument.registerFactory(ObjectFactory.with(create: { B1PreAlertManagementDocument(withDefaults: false) }, createWithDecoder: { d in try B1PreAlertManagementDocument(from: d) }))
        B1ClassMetadata.ComplexTypes.alertManagementParams.registerFactory(ObjectFactory.with(create: { B1PreAlertManagementParams(withDefaults: false) }, createWithDecoder: { d in try B1PreAlertManagementParams(from: d) }))
        B1ClassMetadata.ComplexTypes.alertManagementRecipient.registerFactory(ObjectFactory.with(create: { B1PreAlertManagementRecipient(withDefaults: false) }, createWithDecoder: { d in try B1PreAlertManagementRecipient(from: d) }))
        B1ClassMetadata.ComplexTypes.alternateCatNumParams.registerFactory(ObjectFactory.with(create: { B1PreAlternateCatNumParams(withDefaults: false) }, createWithDecoder: { d in try B1PreAlternateCatNumParams(from: d) }))
        B1ClassMetadata.ComplexTypes.alternativeItem.registerFactory(ObjectFactory.with(create: { B1PreAlternativeItem(withDefaults: false) }, createWithDecoder: { d in try B1PreAlternativeItem(from: d) }))
        B1ClassMetadata.ComplexTypes.approvalRequestDecision.registerFactory(ObjectFactory.with(create: { B1PreApprovalRequestDecision(withDefaults: false) }, createWithDecoder: { d in try B1PreApprovalRequestDecision(from: d) }))
        B1ClassMetadata.ComplexTypes.approvalRequestLine.registerFactory(ObjectFactory.with(create: { B1PreApprovalRequestLine(withDefaults: false) }, createWithDecoder: { d in try B1PreApprovalRequestLine(from: d) }))
        B1ClassMetadata.ComplexTypes.approvalRequestParams.registerFactory(ObjectFactory.with(create: { B1PreApprovalRequestParams(withDefaults: false) }, createWithDecoder: { d in try B1PreApprovalRequestParams(from: d) }))
        B1ClassMetadata.ComplexTypes.approvalStageApprover.registerFactory(ObjectFactory.with(create: { B1PreApprovalStageApprover(withDefaults: false) }, createWithDecoder: { d in try B1PreApprovalStageApprover(from: d) }))
        B1ClassMetadata.ComplexTypes.approvalStageParams.registerFactory(ObjectFactory.with(create: { B1PreApprovalStageParams(withDefaults: false) }, createWithDecoder: { d in try B1PreApprovalStageParams(from: d) }))
        B1ClassMetadata.ComplexTypes.approvalTemplateDocument.registerFactory(ObjectFactory.with(create: { B1PreApprovalTemplateDocument(withDefaults: false) }, createWithDecoder: { d in try B1PreApprovalTemplateDocument(from: d) }))
        B1ClassMetadata.ComplexTypes.approvalTemplateParams.registerFactory(ObjectFactory.with(create: { B1PreApprovalTemplateParams(withDefaults: false) }, createWithDecoder: { d in try B1PreApprovalTemplateParams(from: d) }))
        B1ClassMetadata.ComplexTypes.approvalTemplateQuery.registerFactory(ObjectFactory.with(create: { B1PreApprovalTemplateQuery(withDefaults: false) }, createWithDecoder: { d in try B1PreApprovalTemplateQuery(from: d) }))
        B1ClassMetadata.ComplexTypes.approvalTemplateStage.registerFactory(ObjectFactory.with(create: { B1PreApprovalTemplateStage(withDefaults: false) }, createWithDecoder: { d in try B1PreApprovalTemplateStage(from: d) }))
        B1ClassMetadata.ComplexTypes.approvalTemplateTerm.registerFactory(ObjectFactory.with(create: { B1PreApprovalTemplateTerm(withDefaults: false) }, createWithDecoder: { d in try B1PreApprovalTemplateTerm(from: d) }))
        B1ClassMetadata.ComplexTypes.approvalTemplateUser.registerFactory(ObjectFactory.with(create: { B1PreApprovalTemplateUser(withDefaults: false) }, createWithDecoder: { d in try B1PreApprovalTemplateUser(from: d) }))
        B1ClassMetadata.ComplexTypes.assetClassLine.registerFactory(ObjectFactory.with(create: { B1PreAssetClassLine(withDefaults: false) }, createWithDecoder: { d in try B1PreAssetClassLine(from: d) }))
        B1ClassMetadata.ComplexTypes.assetClassParams.registerFactory(ObjectFactory.with(create: { B1PreAssetClassParams(withDefaults: false) }, createWithDecoder: { d in try B1PreAssetClassParams(from: d) }))
        B1ClassMetadata.ComplexTypes.assetDepreciationGroupParams.registerFactory(ObjectFactory.with(create: { B1PreAssetDepreciationGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreAssetDepreciationGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.assetDocumentAreaJournal.registerFactory(ObjectFactory.with(create: { B1PreAssetDocumentAreaJournal(withDefaults: false) }, createWithDecoder: { d in try B1PreAssetDocumentAreaJournal(from: d) }))
        B1ClassMetadata.ComplexTypes.assetDocumentLine.registerFactory(ObjectFactory.with(create: { B1PreAssetDocumentLine(withDefaults: false) }, createWithDecoder: { d in try B1PreAssetDocumentLine(from: d) }))
        B1ClassMetadata.ComplexTypes.assetDocumentParams.registerFactory(ObjectFactory.with(create: { B1PreAssetDocumentParams(withDefaults: false) }, createWithDecoder: { d in try B1PreAssetDocumentParams(from: d) }))
        B1ClassMetadata.ComplexTypes.assetGroupParams.registerFactory(ObjectFactory.with(create: { B1PreAssetGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreAssetGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.attachments2Params.registerFactory(ObjectFactory.with(create: { B1PreAttachments2Params(withDefaults: false) }, createWithDecoder: { d in try B1PreAttachments2Params(from: d) }))
        B1ClassMetadata.ComplexTypes.attachments2Line.registerFactory(ObjectFactory.with(create: { B1PreAttachments2Line(withDefaults: false) }, createWithDecoder: { d in try B1PreAttachments2Line(from: d) }))
        B1ClassMetadata.ComplexTypes.attributeGroupLine.registerFactory(ObjectFactory.with(create: { B1PreAttributeGroupLine(withDefaults: false) }, createWithDecoder: { d in try B1PreAttributeGroupLine(from: d) }))
        B1ClassMetadata.ComplexTypes.attributeGroupParams.registerFactory(ObjectFactory.with(create: { B1PreAttributeGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreAttributeGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.boeDocumentTypeParams.registerFactory(ObjectFactory.with(create: { B1PreBOEDocumentTypeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBOEDocumentTypeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.boeInstructionParams.registerFactory(ObjectFactory.with(create: { B1PreBOEInstructionParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBOEInstructionParams(from: d) }))
        B1ClassMetadata.ComplexTypes.boeLine.registerFactory(ObjectFactory.with(create: { B1PreBOELine(withDefaults: false) }, createWithDecoder: { d in try B1PreBOELine(from: d) }))
        B1ClassMetadata.ComplexTypes.boeLineParams.registerFactory(ObjectFactory.with(create: { B1PreBOELineParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBOELineParams(from: d) }))
        B1ClassMetadata.ComplexTypes.boePortfolioParams.registerFactory(ObjectFactory.with(create: { B1PreBOEPortfolioParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBOEPortfolioParams(from: d) }))
        B1ClassMetadata.ComplexTypes.bpAccountReceivablePayble.registerFactory(ObjectFactory.with(create: { B1PreBPAccountReceivablePayble(withDefaults: false) }, createWithDecoder: { d in try B1PreBPAccountReceivablePayble(from: d) }))
        B1ClassMetadata.ComplexTypes.bpAddress.registerFactory(ObjectFactory.with(create: { B1PreBPAddress(withDefaults: false) }, createWithDecoder: { d in try B1PreBPAddress(from: d) }))
        B1ClassMetadata.ComplexTypes.bpBankAccount.registerFactory(ObjectFactory.with(create: { B1PreBPBankAccount(withDefaults: false) }, createWithDecoder: { d in try B1PreBPBankAccount(from: d) }))
        B1ClassMetadata.ComplexTypes.bpBlockSendingMarketingContent.registerFactory(ObjectFactory.with(create: { B1PreBPBlockSendingMarketingContent(withDefaults: false) }, createWithDecoder: { d in try B1PreBPBlockSendingMarketingContent(from: d) }))
        B1ClassMetadata.ComplexTypes.bpBranchAssignmentItem.registerFactory(ObjectFactory.with(create: { B1PreBPBranchAssignmentItem(withDefaults: false) }, createWithDecoder: { d in try B1PreBPBranchAssignmentItem(from: d) }))
        B1ClassMetadata.ComplexTypes.bpCode.registerFactory(ObjectFactory.with(create: { B1PreBPCode(withDefaults: false) }, createWithDecoder: { d in try B1PreBPCode(from: d) }))
        B1ClassMetadata.ComplexTypes.bpFiscalTaxID.registerFactory(ObjectFactory.with(create: { B1PreBPFiscalTaxID(withDefaults: false) }, createWithDecoder: { d in try B1PreBPFiscalTaxID(from: d) }))
        B1ClassMetadata.ComplexTypes.bpIntrastatExtension.registerFactory(ObjectFactory.with(create: { B1PreBPIntrastatExtension(withDefaults: false) }, createWithDecoder: { d in try B1PreBPIntrastatExtension(from: d) }))
        B1ClassMetadata.ComplexTypes.bpPaymentDate.registerFactory(ObjectFactory.with(create: { B1PreBPPaymentDate(withDefaults: false) }, createWithDecoder: { d in try B1PreBPPaymentDate(from: d) }))
        B1ClassMetadata.ComplexTypes.bpPaymentMethod.registerFactory(ObjectFactory.with(create: { B1PreBPPaymentMethod(withDefaults: false) }, createWithDecoder: { d in try B1PreBPPaymentMethod(from: d) }))
        B1ClassMetadata.ComplexTypes.bpPriorityParams.registerFactory(ObjectFactory.with(create: { B1PreBPPriorityParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBPPriorityParams(from: d) }))
        B1ClassMetadata.ComplexTypes.bpWithholdingTax.registerFactory(ObjectFactory.with(create: { B1PreBPWithholdingTax(withDefaults: false) }, createWithDecoder: { d in try B1PreBPWithholdingTax(from: d) }))
        B1ClassMetadata.ComplexTypes.bankChargesAllocationCodeParams.registerFactory(ObjectFactory.with(create: { B1PreBankChargesAllocationCodeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBankChargesAllocationCodeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.bankPageParams.registerFactory(ObjectFactory.with(create: { B1PreBankPageParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBankPageParams(from: d) }))
        B1ClassMetadata.ComplexTypes.bankParams.registerFactory(ObjectFactory.with(create: { B1PreBankParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBankParams(from: d) }))
        B1ClassMetadata.ComplexTypes.bankStatementParams.registerFactory(ObjectFactory.with(create: { B1PreBankStatementParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBankStatementParams(from: d) }))
        B1ClassMetadata.ComplexTypes.bankStatementRow.registerFactory(ObjectFactory.with(create: { B1PreBankStatementRow(withDefaults: false) }, createWithDecoder: { d in try B1PreBankStatementRow(from: d) }))
        B1ClassMetadata.ComplexTypes.bankStatementsFilter.registerFactory(ObjectFactory.with(create: { B1PreBankStatementsFilter(withDefaults: false) }, createWithDecoder: { d in try B1PreBankStatementsFilter(from: d) }))
        B1ClassMetadata.ComplexTypes.barCodeParams.registerFactory(ObjectFactory.with(create: { B1PreBarCodeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBarCodeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.batchNumber.registerFactory(ObjectFactory.with(create: { B1PreBatchNumber(withDefaults: false) }, createWithDecoder: { d in try B1PreBatchNumber(from: d) }))
        B1ClassMetadata.ComplexTypes.batchNumberDetailParams.registerFactory(ObjectFactory.with(create: { B1PreBatchNumberDetailParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBatchNumberDetailParams(from: d) }))
        B1ClassMetadata.ComplexTypes.billOfExchange.registerFactory(ObjectFactory.with(create: { B1PreBillOfExchange(withDefaults: false) }, createWithDecoder: { d in try B1PreBillOfExchange(from: d) }))
        B1ClassMetadata.ComplexTypes.billOfExchangeTransBankPage.registerFactory(ObjectFactory.with(create: { B1PreBillOfExchangeTransBankPage(withDefaults: false) }, createWithDecoder: { d in try B1PreBillOfExchangeTransBankPage(from: d) }))
        B1ClassMetadata.ComplexTypes.billOfExchangeTransDeposit.registerFactory(ObjectFactory.with(create: { B1PreBillOfExchangeTransDeposit(withDefaults: false) }, createWithDecoder: { d in try B1PreBillOfExchangeTransDeposit(from: d) }))
        B1ClassMetadata.ComplexTypes.billOfExchangeTransactionLine.registerFactory(ObjectFactory.with(create: { B1PreBillOfExchangeTransactionLine(withDefaults: false) }, createWithDecoder: { d in try B1PreBillOfExchangeTransactionLine(from: d) }))
        B1ClassMetadata.ComplexTypes.billOfExchangeTransactionParams.registerFactory(ObjectFactory.with(create: { B1PreBillOfExchangeTransactionParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBillOfExchangeTransactionParams(from: d) }))
        B1ClassMetadata.ComplexTypes.binLocationAttributeParams.registerFactory(ObjectFactory.with(create: { B1PreBinLocationAttributeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBinLocationAttributeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.binLocationFieldParams.registerFactory(ObjectFactory.with(create: { B1PreBinLocationFieldParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBinLocationFieldParams(from: d) }))
        B1ClassMetadata.ComplexTypes.binLocationParams.registerFactory(ObjectFactory.with(create: { B1PreBinLocationParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBinLocationParams(from: d) }))
        B1ClassMetadata.ComplexTypes.blanketAgreementParams.registerFactory(ObjectFactory.with(create: { B1PreBlanketAgreementParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBlanketAgreementParams(from: d) }))
        B1ClassMetadata.ComplexTypes.blanketAgreementsDocument.registerFactory(ObjectFactory.with(create: { B1PreBlanketAgreementsDocument(withDefaults: false) }, createWithDecoder: { d in try B1PreBlanketAgreementsDocument(from: d) }))
        B1ClassMetadata.ComplexTypes.blanketAgreementsDetailsLine.registerFactory(ObjectFactory.with(create: { B1PreBlanketAgreementsDetailsLine(withDefaults: false) }, createWithDecoder: { d in try B1PreBlanketAgreementsDetailsLine(from: d) }))
        B1ClassMetadata.ComplexTypes.blanketAgreementsItemsLine.registerFactory(ObjectFactory.with(create: { B1PreBlanketAgreementsItemsLine(withDefaults: false) }, createWithDecoder: { d in try B1PreBlanketAgreementsItemsLine(from: d) }))
        B1ClassMetadata.ComplexTypes.blob.registerFactory(ObjectFactory.with(create: { B1PreBlob(withDefaults: false) }, createWithDecoder: { d in try B1PreBlob(from: d) }))
        B1ClassMetadata.ComplexTypes.blobParams.registerFactory(ObjectFactory.with(create: { B1PreBlobParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBlobParams(from: d) }))
        B1ClassMetadata.ComplexTypes.blobTableKeySegment.registerFactory(ObjectFactory.with(create: { B1PreBlobTableKeySegment(withDefaults: false) }, createWithDecoder: { d in try B1PreBlobTableKeySegment(from: d) }))
        B1ClassMetadata.ComplexTypes.boxes1099.registerFactory(ObjectFactory.with(create: { B1PreBoxes1099(withDefaults: false) }, createWithDecoder: { d in try B1PreBoxes1099(from: d) }))
        B1ClassMetadata.ComplexTypes.branchParams.registerFactory(ObjectFactory.with(create: { B1PreBranchParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBranchParams(from: d) }))
        B1ClassMetadata.ComplexTypes.brazilBeverageIndexerParams.registerFactory(ObjectFactory.with(create: { B1PreBrazilBeverageIndexerParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBrazilBeverageIndexerParams(from: d) }))
        B1ClassMetadata.ComplexTypes.brazilFuelIndexerParams.registerFactory(ObjectFactory.with(create: { B1PreBrazilFuelIndexerParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBrazilFuelIndexerParams(from: d) }))
        B1ClassMetadata.ComplexTypes.brazilMultiIndexerParams.registerFactory(ObjectFactory.with(create: { B1PreBrazilMultiIndexerParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBrazilMultiIndexerParams(from: d) }))
        B1ClassMetadata.ComplexTypes.brazilNumericIndexerParams.registerFactory(ObjectFactory.with(create: { B1PreBrazilNumericIndexerParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBrazilNumericIndexerParams(from: d) }))
        B1ClassMetadata.ComplexTypes.brazilStringIndexerParams.registerFactory(ObjectFactory.with(create: { B1PreBrazilStringIndexerParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBrazilStringIndexerParams(from: d) }))
        B1ClassMetadata.ComplexTypes.budgetCostAccountingLine.registerFactory(ObjectFactory.with(create: { B1PreBudgetCostAccountingLine(withDefaults: false) }, createWithDecoder: { d in try B1PreBudgetCostAccountingLine(from: d) }))
        B1ClassMetadata.ComplexTypes.budgetDistributionParams.registerFactory(ObjectFactory.with(create: { B1PreBudgetDistributionParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBudgetDistributionParams(from: d) }))
        B1ClassMetadata.ComplexTypes.budgetLine.registerFactory(ObjectFactory.with(create: { B1PreBudgetLine(withDefaults: false) }, createWithDecoder: { d in try B1PreBudgetLine(from: d) }))
        B1ClassMetadata.ComplexTypes.budgetParams.registerFactory(ObjectFactory.with(create: { B1PreBudgetParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBudgetParams(from: d) }))
        B1ClassMetadata.ComplexTypes.budgetScenarioParams.registerFactory(ObjectFactory.with(create: { B1PreBudgetScenarioParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBudgetScenarioParams(from: d) }))
        B1ClassMetadata.ComplexTypes.businessPartnerGroupParams.registerFactory(ObjectFactory.with(create: { B1PreBusinessPartnerGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBusinessPartnerGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.businessPartnerParams.registerFactory(ObjectFactory.with(create: { B1PreBusinessPartnerParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBusinessPartnerParams(from: d) }))
        B1ClassMetadata.ComplexTypes.businessPartnerPropertyParams.registerFactory(ObjectFactory.with(create: { B1PreBusinessPartnerPropertyParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBusinessPartnerPropertyParams(from: d) }))
        B1ClassMetadata.ComplexTypes.businessPlaceIENumber.registerFactory(ObjectFactory.with(create: { B1PreBusinessPlaceIENumber(withDefaults: false) }, createWithDecoder: { d in try B1PreBusinessPlaceIENumber(from: d) }))
        B1ClassMetadata.ComplexTypes.businessPlaceParams.registerFactory(ObjectFactory.with(create: { B1PreBusinessPlaceParams(withDefaults: false) }, createWithDecoder: { d in try B1PreBusinessPlaceParams(from: d) }))
        B1ClassMetadata.ComplexTypes.businessPlaceTributaryInfo.registerFactory(ObjectFactory.with(create: { B1PreBusinessPlaceTributaryInfo(withDefaults: false) }, createWithDecoder: { d in try B1PreBusinessPlaceTributaryInfo(from: d) }))
        B1ClassMetadata.ComplexTypes.callArgument.registerFactory(ObjectFactory.with(create: { B1PreCallArgument(withDefaults: false) }, createWithDecoder: { d in try B1PreCallArgument(from: d) }))
        B1ClassMetadata.ComplexTypes.callMessage.registerFactory(ObjectFactory.with(create: { B1PreCallMessage(withDefaults: false) }, createWithDecoder: { d in try B1PreCallMessage(from: d) }))
        B1ClassMetadata.ComplexTypes.callMessageArgument.registerFactory(ObjectFactory.with(create: { B1PreCallMessageArgument(withDefaults: false) }, createWithDecoder: { d in try B1PreCallMessageArgument(from: d) }))
        B1ClassMetadata.ComplexTypes.campaignBusinessPartner.registerFactory(ObjectFactory.with(create: { B1PreCampaignBusinessPartner(withDefaults: false) }, createWithDecoder: { d in try B1PreCampaignBusinessPartner(from: d) }))
        B1ClassMetadata.ComplexTypes.campaignItem.registerFactory(ObjectFactory.with(create: { B1PreCampaignItem(withDefaults: false) }, createWithDecoder: { d in try B1PreCampaignItem(from: d) }))
        B1ClassMetadata.ComplexTypes.campaignParams.registerFactory(ObjectFactory.with(create: { B1PreCampaignParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCampaignParams(from: d) }))
        B1ClassMetadata.ComplexTypes.campaignPartner.registerFactory(ObjectFactory.with(create: { B1PreCampaignPartner(withDefaults: false) }, createWithDecoder: { d in try B1PreCampaignPartner(from: d) }))
        B1ClassMetadata.ComplexTypes.campaignResponseTypeParams.registerFactory(ObjectFactory.with(create: { B1PreCampaignResponseTypeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCampaignResponseTypeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.cancelCheckRowParams.registerFactory(ObjectFactory.with(create: { B1PreCancelCheckRowParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCancelCheckRowParams(from: d) }))
        B1ClassMetadata.ComplexTypes.cashDiscountParams.registerFactory(ObjectFactory.with(create: { B1PreCashDiscountParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCashDiscountParams(from: d) }))
        B1ClassMetadata.ComplexTypes.cashFlowAssignment.registerFactory(ObjectFactory.with(create: { B1PreCashFlowAssignment(withDefaults: false) }, createWithDecoder: { d in try B1PreCashFlowAssignment(from: d) }))
        B1ClassMetadata.ComplexTypes.cashFlowLineItemParams.registerFactory(ObjectFactory.with(create: { B1PreCashFlowLineItemParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCashFlowLineItemParams(from: d) }))
        B1ClassMetadata.ComplexTypes.categoryGroup.registerFactory(ObjectFactory.with(create: { B1PreCategoryGroup(withDefaults: false) }, createWithDecoder: { d in try B1PreCategoryGroup(from: d) }))
        B1ClassMetadata.ComplexTypes.certificateSeriesParams.registerFactory(ObjectFactory.with(create: { B1PreCertificateSeriesParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCertificateSeriesParams(from: d) }))
        B1ClassMetadata.ComplexTypes.changeLogDifferenceParams.registerFactory(ObjectFactory.with(create: { B1PreChangeLogDifferenceParams(withDefaults: false) }, createWithDecoder: { d in try B1PreChangeLogDifferenceParams(from: d) }))
        B1ClassMetadata.ComplexTypes.changeLogParams.registerFactory(ObjectFactory.with(create: { B1PreChangeLogParams(withDefaults: false) }, createWithDecoder: { d in try B1PreChangeLogParams(from: d) }))
        B1ClassMetadata.ComplexTypes.chartOfAccountParams.registerFactory(ObjectFactory.with(create: { B1PreChartOfAccountParams(withDefaults: false) }, createWithDecoder: { d in try B1PreChartOfAccountParams(from: d) }))
        B1ClassMetadata.ComplexTypes.checkInParams.registerFactory(ObjectFactory.with(create: { B1PreCheckInParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCheckInParams(from: d) }))
        B1ClassMetadata.ComplexTypes.checkLine.registerFactory(ObjectFactory.with(create: { B1PreCheckLine(withDefaults: false) }, createWithDecoder: { d in try B1PreCheckLine(from: d) }))
        B1ClassMetadata.ComplexTypes.checkLineParams.registerFactory(ObjectFactory.with(create: { B1PreCheckLineParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCheckLineParams(from: d) }))
        B1ClassMetadata.ComplexTypes.checksforPaymentLine.registerFactory(ObjectFactory.with(create: { B1PreChecksforPaymentLine(withDefaults: false) }, createWithDecoder: { d in try B1PreChecksforPaymentLine(from: d) }))
        B1ClassMetadata.ComplexTypes.checksforPaymentParams.registerFactory(ObjectFactory.with(create: { B1PreChecksforPaymentParams(withDefaults: false) }, createWithDecoder: { d in try B1PreChecksforPaymentParams(from: d) }))
        B1ClassMetadata.ComplexTypes.chooseFromListParams.registerFactory(ObjectFactory.with(create: { B1PreChooseFromListParams(withDefaults: false) }, createWithDecoder: { d in try B1PreChooseFromListParams(from: d) }))
        B1ClassMetadata.ComplexTypes.chooseFromListLine.registerFactory(ObjectFactory.with(create: { B1PreChooseFromListLine(withDefaults: false) }, createWithDecoder: { d in try B1PreChooseFromListLine(from: d) }))
        B1ClassMetadata.ComplexTypes.cockpitParams.registerFactory(ObjectFactory.with(create: { B1PreCockpitParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCockpitParams(from: d) }))
        B1ClassMetadata.ComplexTypes.columnsPreferencesParams.registerFactory(ObjectFactory.with(create: { B1PreColumnsPreferencesParams(withDefaults: false) }, createWithDecoder: { d in try B1PreColumnsPreferencesParams(from: d) }))
        B1ClassMetadata.ComplexTypes.commissionGroupParams.registerFactory(ObjectFactory.with(create: { B1PreCommissionGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCommissionGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.companyInfo.registerFactory(ObjectFactory.with(create: { B1PreCompanyInfo(withDefaults: false) }, createWithDecoder: { d in try B1PreCompanyInfo(from: d) }))
        B1ClassMetadata.ComplexTypes.contactEmployee.registerFactory(ObjectFactory.with(create: { B1PreContactEmployee(withDefaults: false) }, createWithDecoder: { d in try B1PreContactEmployee(from: d) }))
        B1ClassMetadata.ComplexTypes.contactEmployeeBlockSendingMarketingContent.registerFactory(ObjectFactory.with(create: { B1PreContactEmployeeBlockSendingMarketingContent(withDefaults: false) }, createWithDecoder: { d in try B1PreContactEmployeeBlockSendingMarketingContent(from: d) }))
        B1ClassMetadata.ComplexTypes.contactParams.registerFactory(ObjectFactory.with(create: { B1PreContactParams(withDefaults: false) }, createWithDecoder: { d in try B1PreContactParams(from: d) }))
        B1ClassMetadata.ComplexTypes.contractTemplateParams.registerFactory(ObjectFactory.with(create: { B1PreContractTemplateParams(withDefaults: false) }, createWithDecoder: { d in try B1PreContractTemplateParams(from: d) }))
        B1ClassMetadata.ComplexTypes.costCenterTypeParams.registerFactory(ObjectFactory.with(create: { B1PreCostCenterTypeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCostCenterTypeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.costElementParams.registerFactory(ObjectFactory.with(create: { B1PreCostElementParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCostElementParams(from: d) }))
        B1ClassMetadata.ComplexTypes.countryParams.registerFactory(ObjectFactory.with(create: { B1PreCountryParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCountryParams(from: d) }))
        B1ClassMetadata.ComplexTypes.creditCardParams.registerFactory(ObjectFactory.with(create: { B1PreCreditCardParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCreditCardParams(from: d) }))
        B1ClassMetadata.ComplexTypes.creditCardPaymentParams.registerFactory(ObjectFactory.with(create: { B1PreCreditCardPaymentParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCreditCardPaymentParams(from: d) }))
        B1ClassMetadata.ComplexTypes.creditLine.registerFactory(ObjectFactory.with(create: { B1PreCreditLine(withDefaults: false) }, createWithDecoder: { d in try B1PreCreditLine(from: d) }))
        B1ClassMetadata.ComplexTypes.creditLineParams.registerFactory(ObjectFactory.with(create: { B1PreCreditLineParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCreditLineParams(from: d) }))
        B1ClassMetadata.ComplexTypes.creditPaymentMethodParams.registerFactory(ObjectFactory.with(create: { B1PreCreditPaymentMethodParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCreditPaymentMethodParams(from: d) }))
        B1ClassMetadata.ComplexTypes.currenciesParams.registerFactory(ObjectFactory.with(create: { B1PreCurrenciesParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCurrenciesParams(from: d) }))
        B1ClassMetadata.ComplexTypes.currencyRestriction.registerFactory(ObjectFactory.with(create: { B1PreCurrencyRestriction(withDefaults: false) }, createWithDecoder: { d in try B1PreCurrencyRestriction(from: d) }))
        B1ClassMetadata.ComplexTypes.customerEquipmentCardParams.registerFactory(ObjectFactory.with(create: { B1PreCustomerEquipmentCardParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCustomerEquipmentCardParams(from: d) }))
        B1ClassMetadata.ComplexTypes.customsDeclarationParams.registerFactory(ObjectFactory.with(create: { B1PreCustomsDeclarationParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCustomsDeclarationParams(from: d) }))
        B1ClassMetadata.ComplexTypes.customsGroupParams.registerFactory(ObjectFactory.with(create: { B1PreCustomsGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCustomsGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.cycleCountDeterminationParams.registerFactory(ObjectFactory.with(create: { B1PreCycleCountDeterminationParams(withDefaults: false) }, createWithDecoder: { d in try B1PreCycleCountDeterminationParams(from: d) }))
        B1ClassMetadata.ComplexTypes.cycleCountDeterminationSetup.registerFactory(ObjectFactory.with(create: { B1PreCycleCountDeterminationSetup(withDefaults: false) }, createWithDecoder: { d in try B1PreCycleCountDeterminationSetup(from: d) }))
        B1ClassMetadata.ComplexTypes.dnfCodeSetupParams.registerFactory(ObjectFactory.with(create: { B1PreDNFCodeSetupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDNFCodeSetupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.dashboardPackageImportParams.registerFactory(ObjectFactory.with(create: { B1PreDashboardPackageImportParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDashboardPackageImportParams(from: d) }))
        B1ClassMetadata.ComplexTypes.dashboardPackageParams.registerFactory(ObjectFactory.with(create: { B1PreDashboardPackageParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDashboardPackageParams(from: d) }))
        B1ClassMetadata.ComplexTypes.decimalData.registerFactory(ObjectFactory.with(create: { B1PreDecimalData(withDefaults: false) }, createWithDecoder: { d in try B1PreDecimalData(from: d) }))
        B1ClassMetadata.ComplexTypes.deductionTaxGroupParams.registerFactory(ObjectFactory.with(create: { B1PreDeductionTaxGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDeductionTaxGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.deductionTaxHierarchiesLine.registerFactory(ObjectFactory.with(create: { B1PreDeductionTaxHierarchiesLine(withDefaults: false) }, createWithDecoder: { d in try B1PreDeductionTaxHierarchiesLine(from: d) }))
        B1ClassMetadata.ComplexTypes.deductionTaxHierarchyParams.registerFactory(ObjectFactory.with(create: { B1PreDeductionTaxHierarchyParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDeductionTaxHierarchyParams(from: d) }))
        B1ClassMetadata.ComplexTypes.deductionTaxSubGroupParams.registerFactory(ObjectFactory.with(create: { B1PreDeductionTaxSubGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDeductionTaxSubGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.defaultElectronicSeriesParams.registerFactory(ObjectFactory.with(create: { B1PreDefaultElectronicSeriesParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDefaultElectronicSeriesParams(from: d) }))
        B1ClassMetadata.ComplexTypes.defaultReportParams.registerFactory(ObjectFactory.with(create: { B1PreDefaultReportParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDefaultReportParams(from: d) }))
        B1ClassMetadata.ComplexTypes.departmentParams.registerFactory(ObjectFactory.with(create: { B1PreDepartmentParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDepartmentParams(from: d) }))
        B1ClassMetadata.ComplexTypes.depositParams.registerFactory(ObjectFactory.with(create: { B1PreDepositParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDepositParams(from: d) }))
        B1ClassMetadata.ComplexTypes.depreciationAreaParams.registerFactory(ObjectFactory.with(create: { B1PreDepreciationAreaParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDepreciationAreaParams(from: d) }))
        B1ClassMetadata.ComplexTypes.depreciationLevel.registerFactory(ObjectFactory.with(create: { B1PreDepreciationLevel(withDefaults: false) }, createWithDecoder: { d in try B1PreDepreciationLevel(from: d) }))
        B1ClassMetadata.ComplexTypes.depreciationTypeParams.registerFactory(ObjectFactory.with(create: { B1PreDepreciationTypeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDepreciationTypeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.depreciationTypePoolParams.registerFactory(ObjectFactory.with(create: { B1PreDepreciationTypePoolParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDepreciationTypePoolParams(from: d) }))
        B1ClassMetadata.ComplexTypes.determinationCriteriaParams.registerFactory(ObjectFactory.with(create: { B1PreDeterminationCriteriaParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDeterminationCriteriaParams(from: d) }))
        B1ClassMetadata.ComplexTypes.dimensionParams.registerFactory(ObjectFactory.with(create: { B1PreDimensionParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDimensionParams(from: d) }))
        B1ClassMetadata.ComplexTypes.discountGroup.registerFactory(ObjectFactory.with(create: { B1PreDiscountGroup(withDefaults: false) }, createWithDecoder: { d in try B1PreDiscountGroup(from: d) }))
        B1ClassMetadata.ComplexTypes.discountGroupLine.registerFactory(ObjectFactory.with(create: { B1PreDiscountGroupLine(withDefaults: false) }, createWithDecoder: { d in try B1PreDiscountGroupLine(from: d) }))
        B1ClassMetadata.ComplexTypes.discountLine.registerFactory(ObjectFactory.with(create: { B1PreDiscountLine(withDefaults: false) }, createWithDecoder: { d in try B1PreDiscountLine(from: d) }))
        B1ClassMetadata.ComplexTypes.distributionRuleLine.registerFactory(ObjectFactory.with(create: { B1PreDistributionRuleLine(withDefaults: false) }, createWithDecoder: { d in try B1PreDistributionRuleLine(from: d) }))
        B1ClassMetadata.ComplexTypes.distributionRuleParams.registerFactory(ObjectFactory.with(create: { B1PreDistributionRuleParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDistributionRuleParams(from: d) }))
        B1ClassMetadata.ComplexTypes.docExpenseTaxJurisdiction.registerFactory(ObjectFactory.with(create: { B1PreDocExpenseTaxJurisdiction(withDefaults: false) }, createWithDecoder: { d in try B1PreDocExpenseTaxJurisdiction(from: d) }))
        B1ClassMetadata.ComplexTypes.docsInWTGroups.registerFactory(ObjectFactory.with(create: { B1PreDocsInWTGroups(withDefaults: false) }, createWithDecoder: { d in try B1PreDocsInWTGroups(from: d) }))
        B1ClassMetadata.ComplexTypes.documentAdditionalExpense.registerFactory(ObjectFactory.with(create: { B1PreDocumentAdditionalExpense(withDefaults: false) }, createWithDecoder: { d in try B1PreDocumentAdditionalExpense(from: d) }))
        B1ClassMetadata.ComplexTypes.documentChangeMenuName.registerFactory(ObjectFactory.with(create: { B1PreDocumentChangeMenuName(withDefaults: false) }, createWithDecoder: { d in try B1PreDocumentChangeMenuName(from: d) }))
        B1ClassMetadata.ComplexTypes.documentInstallment.registerFactory(ObjectFactory.with(create: { B1PreDocumentInstallment(withDefaults: false) }, createWithDecoder: { d in try B1PreDocumentInstallment(from: d) }))
        B1ClassMetadata.ComplexTypes.documentLine.registerFactory(ObjectFactory.with(create: { B1PreDocumentLine(withDefaults: false) }, createWithDecoder: { d in try B1PreDocumentLine(from: d) }))
        B1ClassMetadata.ComplexTypes.documentLineAdditionalExpense.registerFactory(ObjectFactory.with(create: { B1PreDocumentLineAdditionalExpense(withDefaults: false) }, createWithDecoder: { d in try B1PreDocumentLineAdditionalExpense(from: d) }))
        B1ClassMetadata.ComplexTypes.documentLinesBinAllocation.registerFactory(ObjectFactory.with(create: { B1PreDocumentLinesBinAllocation(withDefaults: false) }, createWithDecoder: { d in try B1PreDocumentLinesBinAllocation(from: d) }))
        B1ClassMetadata.ComplexTypes.documentPackage.registerFactory(ObjectFactory.with(create: { B1PreDocumentPackage(withDefaults: false) }, createWithDecoder: { d in try B1PreDocumentPackage(from: d) }))
        B1ClassMetadata.ComplexTypes.documentPackageItem.registerFactory(ObjectFactory.with(create: { B1PreDocumentPackageItem(withDefaults: false) }, createWithDecoder: { d in try B1PreDocumentPackageItem(from: d) }))
        B1ClassMetadata.ComplexTypes.documentParams.registerFactory(ObjectFactory.with(create: { B1PreDocumentParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDocumentParams(from: d) }))
        B1ClassMetadata.ComplexTypes.documentSeriesParams.registerFactory(ObjectFactory.with(create: { B1PreDocumentSeriesParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDocumentSeriesParams(from: d) }))
        B1ClassMetadata.ComplexTypes.documentSeriesUserParams.registerFactory(ObjectFactory.with(create: { B1PreDocumentSeriesUserParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDocumentSeriesUserParams(from: d) }))
        B1ClassMetadata.ComplexTypes.documentSpecialLine.registerFactory(ObjectFactory.with(create: { B1PreDocumentSpecialLine(withDefaults: false) }, createWithDecoder: { d in try B1PreDocumentSpecialLine(from: d) }))
        B1ClassMetadata.ComplexTypes.documentTypeParams.registerFactory(ObjectFactory.with(create: { B1PreDocumentTypeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDocumentTypeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.documentApprovalRequest.registerFactory(ObjectFactory.with(create: { B1PreDocumentApprovalRequest(withDefaults: false) }, createWithDecoder: { d in try B1PreDocumentApprovalRequest(from: d) }))
        B1ClassMetadata.ComplexTypes.downPaymentToDraw.registerFactory(ObjectFactory.with(create: { B1PreDownPaymentToDraw(withDefaults: false) }, createWithDecoder: { d in try B1PreDownPaymentToDraw(from: d) }))
        B1ClassMetadata.ComplexTypes.downPaymentToDrawDetails.registerFactory(ObjectFactory.with(create: { B1PreDownPaymentToDrawDetails(withDefaults: false) }, createWithDecoder: { d in try B1PreDownPaymentToDrawDetails(from: d) }))
        B1ClassMetadata.ComplexTypes.dppChangeParams.registerFactory(ObjectFactory.with(create: { B1PreDppChangeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDppChangeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.dunningLetterParams.registerFactory(ObjectFactory.with(create: { B1PreDunningLetterParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDunningLetterParams(from: d) }))
        B1ClassMetadata.ComplexTypes.dunningTermLine.registerFactory(ObjectFactory.with(create: { B1PreDunningTermLine(withDefaults: false) }, createWithDecoder: { d in try B1PreDunningTermLine(from: d) }))
        B1ClassMetadata.ComplexTypes.dunningTermParams.registerFactory(ObjectFactory.with(create: { B1PreDunningTermParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDunningTermParams(from: d) }))
        B1ClassMetadata.ComplexTypes.dynamicSystemStringParams.registerFactory(ObjectFactory.with(create: { B1PreDynamicSystemStringParams(withDefaults: false) }, createWithDecoder: { d in try B1PreDynamicSystemStringParams(from: d) }))
        B1ClassMetadata.ComplexTypes.ecmActionStatusData.registerFactory(ObjectFactory.with(create: { B1PreECMActionStatusData(withDefaults: false) }, createWithDecoder: { d in try B1PreECMActionStatusData(from: d) }))
        B1ClassMetadata.ComplexTypes.ecmCodeParams.registerFactory(ObjectFactory.with(create: { B1PreECMCodeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreECMCodeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.ecmAction.registerFactory(ObjectFactory.with(create: { B1PreEcmAction(withDefaults: false) }, createWithDecoder: { d in try B1PreEcmAction(from: d) }))
        B1ClassMetadata.ComplexTypes.ecmActionDocParams.registerFactory(ObjectFactory.with(create: { B1PreEcmActionDocParams(withDefaults: false) }, createWithDecoder: { d in try B1PreEcmActionDocParams(from: d) }))
        B1ClassMetadata.ComplexTypes.ecmActionLog.registerFactory(ObjectFactory.with(create: { B1PreEcmActionLog(withDefaults: false) }, createWithDecoder: { d in try B1PreEcmActionLog(from: d) }))
        B1ClassMetadata.ComplexTypes.ecmActionLogParams.registerFactory(ObjectFactory.with(create: { B1PreEcmActionLogParams(withDefaults: false) }, createWithDecoder: { d in try B1PreEcmActionLogParams(from: d) }))
        B1ClassMetadata.ComplexTypes.ecmActionParams.registerFactory(ObjectFactory.with(create: { B1PreEcmActionParams(withDefaults: false) }, createWithDecoder: { d in try B1PreEcmActionParams(from: d) }))
        B1ClassMetadata.ComplexTypes.electronicFileFormatParams.registerFactory(ObjectFactory.with(create: { B1PreElectronicFileFormatParams(withDefaults: false) }, createWithDecoder: { d in try B1PreElectronicFileFormatParams(from: d) }))
        B1ClassMetadata.ComplexTypes.electronicSeries.registerFactory(ObjectFactory.with(create: { B1PreElectronicSeries(withDefaults: false) }, createWithDecoder: { d in try B1PreElectronicSeries(from: d) }))
        B1ClassMetadata.ComplexTypes.electronicSeriesParams.registerFactory(ObjectFactory.with(create: { B1PreElectronicSeriesParams(withDefaults: false) }, createWithDecoder: { d in try B1PreElectronicSeriesParams(from: d) }))
        B1ClassMetadata.ComplexTypes.emailGroupParams.registerFactory(ObjectFactory.with(create: { B1PreEmailGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreEmailGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.employeeAbsenceInfo.registerFactory(ObjectFactory.with(create: { B1PreEmployeeAbsenceInfo(withDefaults: false) }, createWithDecoder: { d in try B1PreEmployeeAbsenceInfo(from: d) }))
        B1ClassMetadata.ComplexTypes.employeeBranchAssignmentItem.registerFactory(ObjectFactory.with(create: { B1PreEmployeeBranchAssignmentItem(withDefaults: false) }, createWithDecoder: { d in try B1PreEmployeeBranchAssignmentItem(from: d) }))
        B1ClassMetadata.ComplexTypes.employeeEducationInfo.registerFactory(ObjectFactory.with(create: { B1PreEmployeeEducationInfo(withDefaults: false) }, createWithDecoder: { d in try B1PreEmployeeEducationInfo(from: d) }))
        B1ClassMetadata.ComplexTypes.employeeFullNamesParams.registerFactory(ObjectFactory.with(create: { B1PreEmployeeFullNamesParams(withDefaults: false) }, createWithDecoder: { d in try B1PreEmployeeFullNamesParams(from: d) }))
        B1ClassMetadata.ComplexTypes.employeeIDTypeParams.registerFactory(ObjectFactory.with(create: { B1PreEmployeeIDTypeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreEmployeeIDTypeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.employeeInfoParams.registerFactory(ObjectFactory.with(create: { B1PreEmployeeInfoParams(withDefaults: false) }, createWithDecoder: { d in try B1PreEmployeeInfoParams(from: d) }))
        B1ClassMetadata.ComplexTypes.employeePositionParams.registerFactory(ObjectFactory.with(create: { B1PreEmployeePositionParams(withDefaults: false) }, createWithDecoder: { d in try B1PreEmployeePositionParams(from: d) }))
        B1ClassMetadata.ComplexTypes.employeePreviousEmpoymentInfo.registerFactory(ObjectFactory.with(create: { B1PreEmployeePreviousEmpoymentInfo(withDefaults: false) }, createWithDecoder: { d in try B1PreEmployeePreviousEmpoymentInfo(from: d) }))
        B1ClassMetadata.ComplexTypes.employeeReviewsInfo.registerFactory(ObjectFactory.with(create: { B1PreEmployeeReviewsInfo(withDefaults: false) }, createWithDecoder: { d in try B1PreEmployeeReviewsInfo(from: d) }))
        B1ClassMetadata.ComplexTypes.employeeRoleSetupParams.registerFactory(ObjectFactory.with(create: { B1PreEmployeeRoleSetupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreEmployeeRoleSetupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.employeeRolesInfo.registerFactory(ObjectFactory.with(create: { B1PreEmployeeRolesInfo(withDefaults: false) }, createWithDecoder: { d in try B1PreEmployeeRolesInfo(from: d) }))
        B1ClassMetadata.ComplexTypes.employeeSavingsPaymentInfo.registerFactory(ObjectFactory.with(create: { B1PreEmployeeSavingsPaymentInfo(withDefaults: false) }, createWithDecoder: { d in try B1PreEmployeeSavingsPaymentInfo(from: d) }))
        B1ClassMetadata.ComplexTypes.employeeStatusParams.registerFactory(ObjectFactory.with(create: { B1PreEmployeeStatusParams(withDefaults: false) }, createWithDecoder: { d in try B1PreEmployeeStatusParams(from: d) }))
        B1ClassMetadata.ComplexTypes.employeeTransferDetail.registerFactory(ObjectFactory.with(create: { B1PreEmployeeTransferDetail(withDefaults: false) }, createWithDecoder: { d in try B1PreEmployeeTransferDetail(from: d) }))
        B1ClassMetadata.ComplexTypes.employeeTransferParams.registerFactory(ObjectFactory.with(create: { B1PreEmployeeTransferParams(withDefaults: false) }, createWithDecoder: { d in try B1PreEmployeeTransferParams(from: d) }))
        B1ClassMetadata.ComplexTypes.enhancedDiscountGroupParams.registerFactory(ObjectFactory.with(create: { B1PreEnhancedDiscountGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreEnhancedDiscountGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.expenseTypeParams.registerFactory(ObjectFactory.with(create: { B1PreExpenseTypeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreExpenseTypeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.exportProcess.registerFactory(ObjectFactory.with(create: { B1PreExportProcess(withDefaults: false) }, createWithDecoder: { d in try B1PreExportProcess(from: d) }))
        B1ClassMetadata.ComplexTypes.extendedAdminInfo.registerFactory(ObjectFactory.with(create: { B1PreExtendedAdminInfo(withDefaults: false) }, createWithDecoder: { d in try B1PreExtendedAdminInfo(from: d) }))
        B1ClassMetadata.ComplexTypes.extendedTranslationParams.registerFactory(ObjectFactory.with(create: { B1PreExtendedTranslationParams(withDefaults: false) }, createWithDecoder: { d in try B1PreExtendedTranslationParams(from: d) }))
        B1ClassMetadata.ComplexTypes.extendedTranslationItemLine.registerFactory(ObjectFactory.with(create: { B1PreExtendedTranslationItemLine(withDefaults: false) }, createWithDecoder: { d in try B1PreExtendedTranslationItemLine(from: d) }))
        B1ClassMetadata.ComplexTypes.extendedTranslationResultLine.registerFactory(ObjectFactory.with(create: { B1PreExtendedTranslationResultLine(withDefaults: false) }, createWithDecoder: { d in try B1PreExtendedTranslationResultLine(from: d) }))
        B1ClassMetadata.ComplexTypes.externalCall.registerFactory(ObjectFactory.with(create: { B1PreExternalCall(withDefaults: false) }, createWithDecoder: { d in try B1PreExternalCall(from: d) }))
        B1ClassMetadata.ComplexTypes.externalCallParams.registerFactory(ObjectFactory.with(create: { B1PreExternalCallParams(withDefaults: false) }, createWithDecoder: { d in try B1PreExternalCallParams(from: d) }))
        B1ClassMetadata.ComplexTypes.externalReconciliation.registerFactory(ObjectFactory.with(create: { B1PreExternalReconciliation(withDefaults: false) }, createWithDecoder: { d in try B1PreExternalReconciliation(from: d) }))
        B1ClassMetadata.ComplexTypes.externalReconciliationFilterParams.registerFactory(ObjectFactory.with(create: { B1PreExternalReconciliationFilterParams(withDefaults: false) }, createWithDecoder: { d in try B1PreExternalReconciliationFilterParams(from: d) }))
        B1ClassMetadata.ComplexTypes.externalReconciliationParams.registerFactory(ObjectFactory.with(create: { B1PreExternalReconciliationParams(withDefaults: false) }, createWithDecoder: { d in try B1PreExternalReconciliationParams(from: d) }))
        B1ClassMetadata.ComplexTypes.faAccountDeterminationParams.registerFactory(ObjectFactory.with(create: { B1PreFAAccountDeterminationParams(withDefaults: false) }, createWithDecoder: { d in try B1PreFAAccountDeterminationParams(from: d) }))
        B1ClassMetadata.ComplexTypes.fifoLayer.registerFactory(ObjectFactory.with(create: { B1PreFIFOLayer(withDefaults: false) }, createWithDecoder: { d in try B1PreFIFOLayer(from: d) }))
        B1ClassMetadata.ComplexTypes.factoringIndicatorParams.registerFactory(ObjectFactory.with(create: { B1PreFactoringIndicatorParams(withDefaults: false) }, createWithDecoder: { d in try B1PreFactoringIndicatorParams(from: d) }))
        B1ClassMetadata.ComplexTypes.featureStatus.registerFactory(ObjectFactory.with(create: { B1PreFeatureStatus(withDefaults: false) }, createWithDecoder: { d in try B1PreFeatureStatus(from: d) }))
        B1ClassMetadata.ComplexTypes.financePeriod.registerFactory(ObjectFactory.with(create: { B1PreFinancePeriod(withDefaults: false) }, createWithDecoder: { d in try B1PreFinancePeriod(from: d) }))
        B1ClassMetadata.ComplexTypes.financePeriodParams.registerFactory(ObjectFactory.with(create: { B1PreFinancePeriodParams(withDefaults: false) }, createWithDecoder: { d in try B1PreFinancePeriodParams(from: d) }))
        B1ClassMetadata.ComplexTypes.financialYearParams.registerFactory(ObjectFactory.with(create: { B1PreFinancialYearParams(withDefaults: false) }, createWithDecoder: { d in try B1PreFinancialYearParams(from: d) }))
        B1ClassMetadata.ComplexTypes.fiscalPrinterParams.registerFactory(ObjectFactory.with(create: { B1PreFiscalPrinterParams(withDefaults: false) }, createWithDecoder: { d in try B1PreFiscalPrinterParams(from: d) }))
        B1ClassMetadata.ComplexTypes.fixedAssetEndBalance.registerFactory(ObjectFactory.with(create: { B1PreFixedAssetEndBalance(withDefaults: false) }, createWithDecoder: { d in try B1PreFixedAssetEndBalance(from: d) }))
        B1ClassMetadata.ComplexTypes.fixedAssetValues.registerFactory(ObjectFactory.with(create: { B1PreFixedAssetValues(withDefaults: false) }, createWithDecoder: { d in try B1PreFixedAssetValues(from: d) }))
        B1ClassMetadata.ComplexTypes.fixedAssetValuesParams.registerFactory(ObjectFactory.with(create: { B1PreFixedAssetValuesParams(withDefaults: false) }, createWithDecoder: { d in try B1PreFixedAssetValuesParams(from: d) }))
        B1ClassMetadata.ComplexTypes.formattedSearchParams.registerFactory(ObjectFactory.with(create: { B1PreFormattedSearchParams(withDefaults: false) }, createWithDecoder: { d in try B1PreFormattedSearchParams(from: d) }))
        B1ClassMetadata.ComplexTypes.forms1099Params.registerFactory(ObjectFactory.with(create: { B1PreForms1099Params(withDefaults: false) }, createWithDecoder: { d in try B1PreForms1099Params(from: d) }))
        B1ClassMetadata.ComplexTypes.glAccount.registerFactory(ObjectFactory.with(create: { B1PreGLAccount(withDefaults: false) }, createWithDecoder: { d in try B1PreGLAccount(from: d) }))
        B1ClassMetadata.ComplexTypes.glAccountAdvancedRuleParams.registerFactory(ObjectFactory.with(create: { B1PreGLAccountAdvancedRuleParams(withDefaults: false) }, createWithDecoder: { d in try B1PreGLAccountAdvancedRuleParams(from: d) }))
        B1ClassMetadata.ComplexTypes.gtiParams.registerFactory(ObjectFactory.with(create: { B1PreGTIParams(withDefaults: false) }, createWithDecoder: { d in try B1PreGTIParams(from: d) }))
        B1ClassMetadata.ComplexTypes.generatedAsset.registerFactory(ObjectFactory.with(create: { B1PreGeneratedAsset(withDefaults: false) }, createWithDecoder: { d in try B1PreGeneratedAsset(from: d) }))
        B1ClassMetadata.ComplexTypes.getChangeLogParams.registerFactory(ObjectFactory.with(create: { B1PreGetChangeLogParams(withDefaults: false) }, createWithDecoder: { d in try B1PreGetChangeLogParams(from: d) }))
        B1ClassMetadata.ComplexTypes.govPayCodeAuthority.registerFactory(ObjectFactory.with(create: { B1PreGovPayCodeAuthority(withDefaults: false) }, createWithDecoder: { d in try B1PreGovPayCodeAuthority(from: d) }))
        B1ClassMetadata.ComplexTypes.govPayCodeParams.registerFactory(ObjectFactory.with(create: { B1PreGovPayCodeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreGovPayCodeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.houseBankAccountParams.registerFactory(ObjectFactory.with(create: { B1PreHouseBankAccountParams(withDefaults: false) }, createWithDecoder: { d in try B1PreHouseBankAccountParams(from: d) }))
        B1ClassMetadata.ComplexTypes.importProcess.registerFactory(ObjectFactory.with(create: { B1PreImportProcess(withDefaults: false) }, createWithDecoder: { d in try B1PreImportProcess(from: d) }))
        B1ClassMetadata.ComplexTypes.indiaSacCodeParams.registerFactory(ObjectFactory.with(create: { B1PreIndiaSacCodeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreIndiaSacCodeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.individualCounter.registerFactory(ObjectFactory.with(create: { B1PreIndividualCounter(withDefaults: false) }, createWithDecoder: { d in try B1PreIndividualCounter(from: d) }))
        B1ClassMetadata.ComplexTypes.industryParams.registerFactory(ObjectFactory.with(create: { B1PreIndustryParams(withDefaults: false) }, createWithDecoder: { d in try B1PreIndustryParams(from: d) }))
        B1ClassMetadata.ComplexTypes.integrationPackageParams.registerFactory(ObjectFactory.with(create: { B1PreIntegrationPackageParams(withDefaults: false) }, createWithDecoder: { d in try B1PreIntegrationPackageParams(from: d) }))
        B1ClassMetadata.ComplexTypes.internalReconciliationBP.registerFactory(ObjectFactory.with(create: { B1PreInternalReconciliationBP(withDefaults: false) }, createWithDecoder: { d in try B1PreInternalReconciliationBP(from: d) }))
        B1ClassMetadata.ComplexTypes.internalReconciliationOpenTrans.registerFactory(ObjectFactory.with(create: { B1PreInternalReconciliationOpenTrans(withDefaults: false) }, createWithDecoder: { d in try B1PreInternalReconciliationOpenTrans(from: d) }))
        B1ClassMetadata.ComplexTypes.internalReconciliationOpenTransParams.registerFactory(ObjectFactory.with(create: { B1PreInternalReconciliationOpenTransParams(withDefaults: false) }, createWithDecoder: { d in try B1PreInternalReconciliationOpenTransParams(from: d) }))
        B1ClassMetadata.ComplexTypes.internalReconciliationOpenTransRow.registerFactory(ObjectFactory.with(create: { B1PreInternalReconciliationOpenTransRow(withDefaults: false) }, createWithDecoder: { d in try B1PreInternalReconciliationOpenTransRow(from: d) }))
        B1ClassMetadata.ComplexTypes.internalReconciliationParams.registerFactory(ObjectFactory.with(create: { B1PreInternalReconciliationParams(withDefaults: false) }, createWithDecoder: { d in try B1PreInternalReconciliationParams(from: d) }))
        B1ClassMetadata.ComplexTypes.internalReconciliationRow.registerFactory(ObjectFactory.with(create: { B1PreInternalReconciliationRow(withDefaults: false) }, createWithDecoder: { d in try B1PreInternalReconciliationRow(from: d) }))
        B1ClassMetadata.ComplexTypes.intrastatConfigurationParams.registerFactory(ObjectFactory.with(create: { B1PreIntrastatConfigurationParams(withDefaults: false) }, createWithDecoder: { d in try B1PreIntrastatConfigurationParams(from: d) }))
        B1ClassMetadata.ComplexTypes.inventoryCountingBatchNumber.registerFactory(ObjectFactory.with(create: { B1PreInventoryCountingBatchNumber(withDefaults: false) }, createWithDecoder: { d in try B1PreInventoryCountingBatchNumber(from: d) }))
        B1ClassMetadata.ComplexTypes.inventoryCountingLine.registerFactory(ObjectFactory.with(create: { B1PreInventoryCountingLine(withDefaults: false) }, createWithDecoder: { d in try B1PreInventoryCountingLine(from: d) }))
        B1ClassMetadata.ComplexTypes.inventoryCountingLineUoM.registerFactory(ObjectFactory.with(create: { B1PreInventoryCountingLineUoM(withDefaults: false) }, createWithDecoder: { d in try B1PreInventoryCountingLineUoM(from: d) }))
        B1ClassMetadata.ComplexTypes.inventoryCountingParams.registerFactory(ObjectFactory.with(create: { B1PreInventoryCountingParams(withDefaults: false) }, createWithDecoder: { d in try B1PreInventoryCountingParams(from: d) }))
        B1ClassMetadata.ComplexTypes.inventoryCountingSerialNumber.registerFactory(ObjectFactory.with(create: { B1PreInventoryCountingSerialNumber(withDefaults: false) }, createWithDecoder: { d in try B1PreInventoryCountingSerialNumber(from: d) }))
        B1ClassMetadata.ComplexTypes.inventoryCyclesParams.registerFactory(ObjectFactory.with(create: { B1PreInventoryCyclesParams(withDefaults: false) }, createWithDecoder: { d in try B1PreInventoryCyclesParams(from: d) }))
        B1ClassMetadata.ComplexTypes.inventoryOpeningBalanceBatchNumber.registerFactory(ObjectFactory.with(create: { B1PreInventoryOpeningBalanceBatchNumber(withDefaults: false) }, createWithDecoder: { d in try B1PreInventoryOpeningBalanceBatchNumber(from: d) }))
        B1ClassMetadata.ComplexTypes.inventoryOpeningBalanceLine.registerFactory(ObjectFactory.with(create: { B1PreInventoryOpeningBalanceLine(withDefaults: false) }, createWithDecoder: { d in try B1PreInventoryOpeningBalanceLine(from: d) }))
        B1ClassMetadata.ComplexTypes.inventoryOpeningBalanceParams.registerFactory(ObjectFactory.with(create: { B1PreInventoryOpeningBalanceParams(withDefaults: false) }, createWithDecoder: { d in try B1PreInventoryOpeningBalanceParams(from: d) }))
        B1ClassMetadata.ComplexTypes.inventoryOpeningBalanceSerialNumber.registerFactory(ObjectFactory.with(create: { B1PreInventoryOpeningBalanceSerialNumber(withDefaults: false) }, createWithDecoder: { d in try B1PreInventoryOpeningBalanceSerialNumber(from: d) }))
        B1ClassMetadata.ComplexTypes.inventoryPostingBatchNumber.registerFactory(ObjectFactory.with(create: { B1PreInventoryPostingBatchNumber(withDefaults: false) }, createWithDecoder: { d in try B1PreInventoryPostingBatchNumber(from: d) }))
        B1ClassMetadata.ComplexTypes.inventoryPostingCopyOption.registerFactory(ObjectFactory.with(create: { B1PreInventoryPostingCopyOption(withDefaults: false) }, createWithDecoder: { d in try B1PreInventoryPostingCopyOption(from: d) }))
        B1ClassMetadata.ComplexTypes.inventoryPostingLine.registerFactory(ObjectFactory.with(create: { B1PreInventoryPostingLine(withDefaults: false) }, createWithDecoder: { d in try B1PreInventoryPostingLine(from: d) }))
        B1ClassMetadata.ComplexTypes.inventoryPostingLineUoM.registerFactory(ObjectFactory.with(create: { B1PreInventoryPostingLineUoM(withDefaults: false) }, createWithDecoder: { d in try B1PreInventoryPostingLineUoM(from: d) }))
        B1ClassMetadata.ComplexTypes.inventoryPostingParams.registerFactory(ObjectFactory.with(create: { B1PreInventoryPostingParams(withDefaults: false) }, createWithDecoder: { d in try B1PreInventoryPostingParams(from: d) }))
        B1ClassMetadata.ComplexTypes.inventoryPostingSerialNumber.registerFactory(ObjectFactory.with(create: { B1PreInventoryPostingSerialNumber(withDefaults: false) }, createWithDecoder: { d in try B1PreInventoryPostingSerialNumber(from: d) }))
        B1ClassMetadata.ComplexTypes.itemAttributeGroups.registerFactory(ObjectFactory.with(create: { B1PreItemAttributeGroups(withDefaults: false) }, createWithDecoder: { d in try B1PreItemAttributeGroups(from: d) }))
        B1ClassMetadata.ComplexTypes.itemBarCode.registerFactory(ObjectFactory.with(create: { B1PreItemBarCode(withDefaults: false) }, createWithDecoder: { d in try B1PreItemBarCode(from: d) }))
        B1ClassMetadata.ComplexTypes.itemCycleCount.registerFactory(ObjectFactory.with(create: { B1PreItemCycleCount(withDefaults: false) }, createWithDecoder: { d in try B1PreItemCycleCount(from: d) }))
        B1ClassMetadata.ComplexTypes.itemDepreciationParameter.registerFactory(ObjectFactory.with(create: { B1PreItemDepreciationParameter(withDefaults: false) }, createWithDecoder: { d in try B1PreItemDepreciationParameter(from: d) }))
        B1ClassMetadata.ComplexTypes.itemDistributionRule.registerFactory(ObjectFactory.with(create: { B1PreItemDistributionRule(withDefaults: false) }, createWithDecoder: { d in try B1PreItemDistributionRule(from: d) }))
        B1ClassMetadata.ComplexTypes.itemGroupParams.registerFactory(ObjectFactory.with(create: { B1PreItemGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreItemGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.itemGroupsWarehouseInfo.registerFactory(ObjectFactory.with(create: { B1PreItemGroupsWarehouseInfo(withDefaults: false) }, createWithDecoder: { d in try B1PreItemGroupsWarehouseInfo(from: d) }))
        B1ClassMetadata.ComplexTypes.itemIntrastatExtension.registerFactory(ObjectFactory.with(create: { B1PreItemIntrastatExtension(withDefaults: false) }, createWithDecoder: { d in try B1PreItemIntrastatExtension(from: d) }))
        B1ClassMetadata.ComplexTypes.itemLocalizationInfo.registerFactory(ObjectFactory.with(create: { B1PreItemLocalizationInfo(withDefaults: false) }, createWithDecoder: { d in try B1PreItemLocalizationInfo(from: d) }))
        B1ClassMetadata.ComplexTypes.itemParams.registerFactory(ObjectFactory.with(create: { B1PreItemParams(withDefaults: false) }, createWithDecoder: { d in try B1PreItemParams(from: d) }))
        B1ClassMetadata.ComplexTypes.itemPeriodControl.registerFactory(ObjectFactory.with(create: { B1PreItemPeriodControl(withDefaults: false) }, createWithDecoder: { d in try B1PreItemPeriodControl(from: d) }))
        B1ClassMetadata.ComplexTypes.itemPreferredVendor.registerFactory(ObjectFactory.with(create: { B1PreItemPreferredVendor(withDefaults: false) }, createWithDecoder: { d in try B1PreItemPreferredVendor(from: d) }))
        B1ClassMetadata.ComplexTypes.itemPrice.registerFactory(ObjectFactory.with(create: { B1PreItemPrice(withDefaults: false) }, createWithDecoder: { d in try B1PreItemPrice(from: d) }))
        B1ClassMetadata.ComplexTypes.itemPriceParams.registerFactory(ObjectFactory.with(create: { B1PreItemPriceParams(withDefaults: false) }, createWithDecoder: { d in try B1PreItemPriceParams(from: d) }))
        B1ClassMetadata.ComplexTypes.itemPriceReturnParams.registerFactory(ObjectFactory.with(create: { B1PreItemPriceReturnParams(withDefaults: false) }, createWithDecoder: { d in try B1PreItemPriceReturnParams(from: d) }))
        B1ClassMetadata.ComplexTypes.itemProject.registerFactory(ObjectFactory.with(create: { B1PreItemProject(withDefaults: false) }, createWithDecoder: { d in try B1PreItemProject(from: d) }))
        B1ClassMetadata.ComplexTypes.itemPropertyParams.registerFactory(ObjectFactory.with(create: { B1PreItemPropertyParams(withDefaults: false) }, createWithDecoder: { d in try B1PreItemPropertyParams(from: d) }))
        B1ClassMetadata.ComplexTypes.itemUnitOfMeasurement.registerFactory(ObjectFactory.with(create: { B1PreItemUnitOfMeasurement(withDefaults: false) }, createWithDecoder: { d in try B1PreItemUnitOfMeasurement(from: d) }))
        B1ClassMetadata.ComplexTypes.itemUoMPackage.registerFactory(ObjectFactory.with(create: { B1PreItemUoMPackage(withDefaults: false) }, createWithDecoder: { d in try B1PreItemUoMPackage(from: d) }))
        B1ClassMetadata.ComplexTypes.itemWarehouseInfo.registerFactory(ObjectFactory.with(create: { B1PreItemWarehouseInfo(withDefaults: false) }, createWithDecoder: { d in try B1PreItemWarehouseInfo(from: d) }))
        B1ClassMetadata.ComplexTypes.journalEntryDocumentTypeParams.registerFactory(ObjectFactory.with(create: { B1PreJournalEntryDocumentTypeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreJournalEntryDocumentTypeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.journalEntryLine.registerFactory(ObjectFactory.with(create: { B1PreJournalEntryLine(withDefaults: false) }, createWithDecoder: { d in try B1PreJournalEntryLine(from: d) }))
        B1ClassMetadata.ComplexTypes.journalEntryParams.registerFactory(ObjectFactory.with(create: { B1PreJournalEntryParams(withDefaults: false) }, createWithDecoder: { d in try B1PreJournalEntryParams(from: d) }))
        B1ClassMetadata.ComplexTypes.kpiParams.registerFactory(ObjectFactory.with(create: { B1PreKPIParams(withDefaults: false) }, createWithDecoder: { d in try B1PreKPIParams(from: d) }))
        B1ClassMetadata.ComplexTypes.kpiItemLine.registerFactory(ObjectFactory.with(create: { B1PreKPIItemLine(withDefaults: false) }, createWithDecoder: { d in try B1PreKPIItemLine(from: d) }))
        B1ClassMetadata.ComplexTypes.knowledgeBaseSolutionParams.registerFactory(ObjectFactory.with(create: { B1PreKnowledgeBaseSolutionParams(withDefaults: false) }, createWithDecoder: { d in try B1PreKnowledgeBaseSolutionParams(from: d) }))
        B1ClassMetadata.ComplexTypes.landedCostParams.registerFactory(ObjectFactory.with(create: { B1PreLandedCostParams(withDefaults: false) }, createWithDecoder: { d in try B1PreLandedCostParams(from: d) }))
        B1ClassMetadata.ComplexTypes.landedCostCostLine.registerFactory(ObjectFactory.with(create: { B1PreLandedCostCostLine(withDefaults: false) }, createWithDecoder: { d in try B1PreLandedCostCostLine(from: d) }))
        B1ClassMetadata.ComplexTypes.landedCostItemLine.registerFactory(ObjectFactory.with(create: { B1PreLandedCostItemLine(withDefaults: false) }, createWithDecoder: { d in try B1PreLandedCostItemLine(from: d) }))
        B1ClassMetadata.ComplexTypes.landedCostsCodeParams.registerFactory(ObjectFactory.with(create: { B1PreLandedCostsCodeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreLandedCostsCodeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.layer.registerFactory(ObjectFactory.with(create: { B1PreLayer(withDefaults: false) }, createWithDecoder: { d in try B1PreLayer(from: d) }))
        B1ClassMetadata.ComplexTypes.legalDataDetail.registerFactory(ObjectFactory.with(create: { B1PreLegalDataDetail(withDefaults: false) }, createWithDecoder: { d in try B1PreLegalDataDetail(from: d) }))
        B1ClassMetadata.ComplexTypes.legalDataParams.registerFactory(ObjectFactory.with(create: { B1PreLegalDataParams(withDefaults: false) }, createWithDecoder: { d in try B1PreLegalDataParams(from: d) }))
        B1ClassMetadata.ComplexTypes.lengthMeasureParams.registerFactory(ObjectFactory.with(create: { B1PreLengthMeasureParams(withDefaults: false) }, createWithDecoder: { d in try B1PreLengthMeasureParams(from: d) }))
        B1ClassMetadata.ComplexTypes.lineExpenseTaxJurisdiction.registerFactory(ObjectFactory.with(create: { B1PreLineExpenseTaxJurisdiction(withDefaults: false) }, createWithDecoder: { d in try B1PreLineExpenseTaxJurisdiction(from: d) }))
        B1ClassMetadata.ComplexTypes.lineTaxJurisdiction.registerFactory(ObjectFactory.with(create: { B1PreLineTaxJurisdiction(withDefaults: false) }, createWithDecoder: { d in try B1PreLineTaxJurisdiction(from: d) }))
        B1ClassMetadata.ComplexTypes.localEraParams.registerFactory(ObjectFactory.with(create: { B1PreLocalEraParams(withDefaults: false) }, createWithDecoder: { d in try B1PreLocalEraParams(from: d) }))
        B1ClassMetadata.ComplexTypes.manufacturerParams.registerFactory(ObjectFactory.with(create: { B1PreManufacturerParams(withDefaults: false) }, createWithDecoder: { d in try B1PreManufacturerParams(from: d) }))
        B1ClassMetadata.ComplexTypes.materialGroupParams.registerFactory(ObjectFactory.with(create: { B1PreMaterialGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreMaterialGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.materialRevaluationFIFO.registerFactory(ObjectFactory.with(create: { B1PreMaterialRevaluationFIFO(withDefaults: false) }, createWithDecoder: { d in try B1PreMaterialRevaluationFIFO(from: d) }))
        B1ClassMetadata.ComplexTypes.materialRevaluationFIFOParams.registerFactory(ObjectFactory.with(create: { B1PreMaterialRevaluationFIFOParams(withDefaults: false) }, createWithDecoder: { d in try B1PreMaterialRevaluationFIFOParams(from: d) }))
        B1ClassMetadata.ComplexTypes.materialRevaluationLine.registerFactory(ObjectFactory.with(create: { B1PreMaterialRevaluationLine(withDefaults: false) }, createWithDecoder: { d in try B1PreMaterialRevaluationLine(from: d) }))
        B1ClassMetadata.ComplexTypes.materialRevaluationParams.registerFactory(ObjectFactory.with(create: { B1PreMaterialRevaluationParams(withDefaults: false) }, createWithDecoder: { d in try B1PreMaterialRevaluationParams(from: d) }))
        B1ClassMetadata.ComplexTypes.materialRevaluationSNBParam.registerFactory(ObjectFactory.with(create: { B1PreMaterialRevaluationSNBParam(withDefaults: false) }, createWithDecoder: { d in try B1PreMaterialRevaluationSNBParam(from: d) }))
        B1ClassMetadata.ComplexTypes.materialRevaluationSNBParams.registerFactory(ObjectFactory.with(create: { B1PreMaterialRevaluationSNBParams(withDefaults: false) }, createWithDecoder: { d in try B1PreMaterialRevaluationSNBParams(from: d) }))
        B1ClassMetadata.ComplexTypes.messageDataColumn.registerFactory(ObjectFactory.with(create: { B1PreMessageDataColumn(withDefaults: false) }, createWithDecoder: { d in try B1PreMessageDataColumn(from: d) }))
        B1ClassMetadata.ComplexTypes.messageDataLine.registerFactory(ObjectFactory.with(create: { B1PreMessageDataLine(withDefaults: false) }, createWithDecoder: { d in try B1PreMessageDataLine(from: d) }))
        B1ClassMetadata.ComplexTypes.messageHeader.registerFactory(ObjectFactory.with(create: { B1PreMessageHeader(withDefaults: false) }, createWithDecoder: { d in try B1PreMessageHeader(from: d) }))
        B1ClassMetadata.ComplexTypes.mobileAddOnSettingParams.registerFactory(ObjectFactory.with(create: { B1PreMobileAddOnSettingParams(withDefaults: false) }, createWithDecoder: { d in try B1PreMobileAddOnSettingParams(from: d) }))
        B1ClassMetadata.ComplexTypes.mobileServerDateTime.registerFactory(ObjectFactory.with(create: { B1PreMobileServerDateTime(withDefaults: false) }, createWithDecoder: { d in try B1PreMobileServerDateTime(from: d) }))
        B1ClassMetadata.ComplexTypes.multiLanguageTranslationParams.registerFactory(ObjectFactory.with(create: { B1PreMultiLanguageTranslationParams(withDefaults: false) }, createWithDecoder: { d in try B1PreMultiLanguageTranslationParams(from: d) }))
        B1ClassMetadata.ComplexTypes.multiplePayment.registerFactory(ObjectFactory.with(create: { B1PreMultiplePayment(withDefaults: false) }, createWithDecoder: { d in try B1PreMultiplePayment(from: d) }))
        B1ClassMetadata.ComplexTypes.ncmCodeSetupParams.registerFactory(ObjectFactory.with(create: { B1PreNCMCodeSetupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreNCMCodeSetupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.nfModelParams.registerFactory(ObjectFactory.with(create: { B1PreNFModelParams(withDefaults: false) }, createWithDecoder: { d in try B1PreNFModelParams(from: d) }))
        B1ClassMetadata.ComplexTypes.nfTaxCategoryParams.registerFactory(ObjectFactory.with(create: { B1PreNFTaxCategoryParams(withDefaults: false) }, createWithDecoder: { d in try B1PreNFTaxCategoryParams(from: d) }))
        B1ClassMetadata.ComplexTypes.natureOfAssesseeParams.registerFactory(ObjectFactory.with(create: { B1PreNatureOfAssesseeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreNatureOfAssesseeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.occurenceCodeParams.registerFactory(ObjectFactory.with(create: { B1PreOccurenceCodeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreOccurenceCodeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.openningBalanceAccount.registerFactory(ObjectFactory.with(create: { B1PreOpenningBalanceAccount(withDefaults: false) }, createWithDecoder: { d in try B1PreOpenningBalanceAccount(from: d) }))
        B1ClassMetadata.ComplexTypes.originalItem.registerFactory(ObjectFactory.with(create: { B1PreOriginalItem(withDefaults: false) }, createWithDecoder: { d in try B1PreOriginalItem(from: d) }))
        B1ClassMetadata.ComplexTypes.originalItemParams.registerFactory(ObjectFactory.with(create: { B1PreOriginalItemParams(withDefaults: false) }, createWithDecoder: { d in try B1PreOriginalItemParams(from: d) }))
        B1ClassMetadata.ComplexTypes.pmcActivityData.registerFactory(ObjectFactory.with(create: { B1PrePMCActivityData(withDefaults: false) }, createWithDecoder: { d in try B1PrePMCActivityData(from: d) }))
        B1ClassMetadata.ComplexTypes.pmcAreaData.registerFactory(ObjectFactory.with(create: { B1PrePMCAreaData(withDefaults: false) }, createWithDecoder: { d in try B1PrePMCAreaData(from: d) }))
        B1ClassMetadata.ComplexTypes.pmcPriorityData.registerFactory(ObjectFactory.with(create: { B1PrePMCPriorityData(withDefaults: false) }, createWithDecoder: { d in try B1PrePMCPriorityData(from: d) }))
        B1ClassMetadata.ComplexTypes.pmcStageTypeData.registerFactory(ObjectFactory.with(create: { B1PrePMCStageTypeData(withDefaults: false) }, createWithDecoder: { d in try B1PrePMCStageTypeData(from: d) }))
        B1ClassMetadata.ComplexTypes.pmcSubprojectTypeData.registerFactory(ObjectFactory.with(create: { B1PrePMCSubprojectTypeData(withDefaults: false) }, createWithDecoder: { d in try B1PrePMCSubprojectTypeData(from: d) }))
        B1ClassMetadata.ComplexTypes.pmcTaskData.registerFactory(ObjectFactory.with(create: { B1PrePMCTaskData(withDefaults: false) }, createWithDecoder: { d in try B1PrePMCTaskData(from: d) }))
        B1ClassMetadata.ComplexTypes.pmsActivityData.registerFactory(ObjectFactory.with(create: { B1PrePMSActivityData(withDefaults: false) }, createWithDecoder: { d in try B1PrePMSActivityData(from: d) }))
        B1ClassMetadata.ComplexTypes.pmsDocAttachement.registerFactory(ObjectFactory.with(create: { B1PrePMSDocAttachement(withDefaults: false) }, createWithDecoder: { d in try B1PrePMSDocAttachement(from: d) }))
        B1ClassMetadata.ComplexTypes.pmsDocumentData.registerFactory(ObjectFactory.with(create: { B1PrePMSDocumentData(withDefaults: false) }, createWithDecoder: { d in try B1PrePMSDocumentData(from: d) }))
        B1ClassMetadata.ComplexTypes.pmsOpenIssueData.registerFactory(ObjectFactory.with(create: { B1PrePMSOpenIssueData(withDefaults: false) }, createWithDecoder: { d in try B1PrePMSOpenIssueData(from: d) }))
        B1ClassMetadata.ComplexTypes.pmsStageAttachement.registerFactory(ObjectFactory.with(create: { B1PrePMSStageAttachement(withDefaults: false) }, createWithDecoder: { d in try B1PrePMSStageAttachement(from: d) }))
        B1ClassMetadata.ComplexTypes.pmsStageData.registerFactory(ObjectFactory.with(create: { B1PrePMSStageData(withDefaults: false) }, createWithDecoder: { d in try B1PrePMSStageData(from: d) }))
        B1ClassMetadata.ComplexTypes.pmsSummaryData.registerFactory(ObjectFactory.with(create: { B1PrePMSSummaryData(withDefaults: false) }, createWithDecoder: { d in try B1PrePMSSummaryData(from: d) }))
        B1ClassMetadata.ComplexTypes.pmsWorkOrderData.registerFactory(ObjectFactory.with(create: { B1PrePMSWorkOrderData(withDefaults: false) }, createWithDecoder: { d in try B1PrePMSWorkOrderData(from: d) }))
        B1ClassMetadata.ComplexTypes.pmActivityData.registerFactory(ObjectFactory.with(create: { B1PrePMActivityData(withDefaults: false) }, createWithDecoder: { d in try B1PrePMActivityData(from: d) }))
        B1ClassMetadata.ComplexTypes.pmDocAttachement.registerFactory(ObjectFactory.with(create: { B1PrePMDocAttachement(withDefaults: false) }, createWithDecoder: { d in try B1PrePMDocAttachement(from: d) }))
        B1ClassMetadata.ComplexTypes.pmDocumentData.registerFactory(ObjectFactory.with(create: { B1PrePMDocumentData(withDefaults: false) }, createWithDecoder: { d in try B1PrePMDocumentData(from: d) }))
        B1ClassMetadata.ComplexTypes.pmOpenIssueData.registerFactory(ObjectFactory.with(create: { B1PrePMOpenIssueData(withDefaults: false) }, createWithDecoder: { d in try B1PrePMOpenIssueData(from: d) }))
        B1ClassMetadata.ComplexTypes.pmProjectDocumentParams.registerFactory(ObjectFactory.with(create: { B1PrePMProjectDocumentParams(withDefaults: false) }, createWithDecoder: { d in try B1PrePMProjectDocumentParams(from: d) }))
        B1ClassMetadata.ComplexTypes.pmStageAttachement.registerFactory(ObjectFactory.with(create: { B1PrePMStageAttachement(withDefaults: false) }, createWithDecoder: { d in try B1PrePMStageAttachement(from: d) }))
        B1ClassMetadata.ComplexTypes.pmStageData.registerFactory(ObjectFactory.with(create: { B1PrePMStageData(withDefaults: false) }, createWithDecoder: { d in try B1PrePMStageData(from: d) }))
        B1ClassMetadata.ComplexTypes.pmSubprojectDocumentData.registerFactory(ObjectFactory.with(create: { B1PrePMSubprojectDocumentData(withDefaults: false) }, createWithDecoder: { d in try B1PrePMSubprojectDocumentData(from: d) }))
        B1ClassMetadata.ComplexTypes.pmSubprojectDocumentParams.registerFactory(ObjectFactory.with(create: { B1PrePMSubprojectDocumentParams(withDefaults: false) }, createWithDecoder: { d in try B1PrePMSubprojectDocumentParams(from: d) }))
        B1ClassMetadata.ComplexTypes.pmSubprojectParams.registerFactory(ObjectFactory.with(create: { B1PrePMSubprojectParams(withDefaults: false) }, createWithDecoder: { d in try B1PrePMSubprojectParams(from: d) }))
        B1ClassMetadata.ComplexTypes.pmSummaryData.registerFactory(ObjectFactory.with(create: { B1PrePMSummaryData(withDefaults: false) }, createWithDecoder: { d in try B1PrePMSummaryData(from: d) }))
        B1ClassMetadata.ComplexTypes.pmTimeSheetLineData.registerFactory(ObjectFactory.with(create: { B1PrePMTimeSheetLineData(withDefaults: false) }, createWithDecoder: { d in try B1PrePMTimeSheetLineData(from: d) }))
        B1ClassMetadata.ComplexTypes.pmTimeSheetParams.registerFactory(ObjectFactory.with(create: { B1PrePMTimeSheetParams(withDefaults: false) }, createWithDecoder: { d in try B1PrePMTimeSheetParams(from: d) }))
        B1ClassMetadata.ComplexTypes.pmWorkOrderData.registerFactory(ObjectFactory.with(create: { B1PrePMWorkOrderData(withDefaults: false) }, createWithDecoder: { d in try B1PrePMWorkOrderData(from: d) }))
        B1ClassMetadata.ComplexTypes.posDailySummaryParams.registerFactory(ObjectFactory.with(create: { B1PrePOSDailySummaryParams(withDefaults: false) }, createWithDecoder: { d in try B1PrePOSDailySummaryParams(from: d) }))
        B1ClassMetadata.ComplexTypes.posTotalizer.registerFactory(ObjectFactory.with(create: { B1PrePOSTotalizer(withDefaults: false) }, createWithDecoder: { d in try B1PrePOSTotalizer(from: d) }))
        B1ClassMetadata.ComplexTypes.packagesTypeParams.registerFactory(ObjectFactory.with(create: { B1PrePackagesTypeParams(withDefaults: false) }, createWithDecoder: { d in try B1PrePackagesTypeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.partnersSetupParams.registerFactory(ObjectFactory.with(create: { B1PrePartnersSetupParams(withDefaults: false) }, createWithDecoder: { d in try B1PrePartnersSetupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.pathAdmin.registerFactory(ObjectFactory.with(create: { B1PrePathAdmin(withDefaults: false) }, createWithDecoder: { d in try B1PrePathAdmin(from: d) }))
        B1ClassMetadata.ComplexTypes.paymentAccount.registerFactory(ObjectFactory.with(create: { B1PrePaymentAccount(withDefaults: false) }, createWithDecoder: { d in try B1PrePaymentAccount(from: d) }))
        B1ClassMetadata.ComplexTypes.paymentAmountParams.registerFactory(ObjectFactory.with(create: { B1PrePaymentAmountParams(withDefaults: false) }, createWithDecoder: { d in try B1PrePaymentAmountParams(from: d) }))
        B1ClassMetadata.ComplexTypes.paymentBPCode.registerFactory(ObjectFactory.with(create: { B1PrePaymentBPCode(withDefaults: false) }, createWithDecoder: { d in try B1PrePaymentBPCode(from: d) }))
        B1ClassMetadata.ComplexTypes.paymentBlockParams.registerFactory(ObjectFactory.with(create: { B1PrePaymentBlockParams(withDefaults: false) }, createWithDecoder: { d in try B1PrePaymentBlockParams(from: d) }))
        B1ClassMetadata.ComplexTypes.paymentCheck.registerFactory(ObjectFactory.with(create: { B1PrePaymentCheck(withDefaults: false) }, createWithDecoder: { d in try B1PrePaymentCheck(from: d) }))
        B1ClassMetadata.ComplexTypes.paymentCreditCard.registerFactory(ObjectFactory.with(create: { B1PrePaymentCreditCard(withDefaults: false) }, createWithDecoder: { d in try B1PrePaymentCreditCard(from: d) }))
        B1ClassMetadata.ComplexTypes.paymentInvoice.registerFactory(ObjectFactory.with(create: { B1PrePaymentInvoice(withDefaults: false) }, createWithDecoder: { d in try B1PrePaymentInvoice(from: d) }))
        B1ClassMetadata.ComplexTypes.paymentInvoiceEntry.registerFactory(ObjectFactory.with(create: { B1PrePaymentInvoiceEntry(withDefaults: false) }, createWithDecoder: { d in try B1PrePaymentInvoiceEntry(from: d) }))
        B1ClassMetadata.ComplexTypes.paymentParams.registerFactory(ObjectFactory.with(create: { B1PrePaymentParams(withDefaults: false) }, createWithDecoder: { d in try B1PrePaymentParams(from: d) }))
        B1ClassMetadata.ComplexTypes.paymentRunExportParams.registerFactory(ObjectFactory.with(create: { B1PrePaymentRunExportParams(withDefaults: false) }, createWithDecoder: { d in try B1PrePaymentRunExportParams(from: d) }))
        B1ClassMetadata.ComplexTypes.paymentRunExportLine.registerFactory(ObjectFactory.with(create: { B1PrePaymentRunExportLine(withDefaults: false) }, createWithDecoder: { d in try B1PrePaymentRunExportLine(from: d) }))
        B1ClassMetadata.ComplexTypes.paymentTermsTypeParams.registerFactory(ObjectFactory.with(create: { B1PrePaymentTermsTypeParams(withDefaults: false) }, createWithDecoder: { d in try B1PrePaymentTermsTypeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.paymentsApprovalRequest.registerFactory(ObjectFactory.with(create: { B1PrePaymentsApprovalRequest(withDefaults: false) }, createWithDecoder: { d in try B1PrePaymentsApprovalRequest(from: d) }))
        B1ClassMetadata.ComplexTypes.periodCategory.registerFactory(ObjectFactory.with(create: { B1PrePeriodCategory(withDefaults: false) }, createWithDecoder: { d in try B1PrePeriodCategory(from: d) }))
        B1ClassMetadata.ComplexTypes.periodCategoryParams.registerFactory(ObjectFactory.with(create: { B1PrePeriodCategoryParams(withDefaults: false) }, createWithDecoder: { d in try B1PrePeriodCategoryParams(from: d) }))
        B1ClassMetadata.ComplexTypes.pickListParams.registerFactory(ObjectFactory.with(create: { B1PrePickListParams(withDefaults: false) }, createWithDecoder: { d in try B1PrePickListParams(from: d) }))
        B1ClassMetadata.ComplexTypes.pickListsLine.registerFactory(ObjectFactory.with(create: { B1PrePickListsLine(withDefaults: false) }, createWithDecoder: { d in try B1PrePickListsLine(from: d) }))
        B1ClassMetadata.ComplexTypes.predefinedTextParams.registerFactory(ObjectFactory.with(create: { B1PrePredefinedTextParams(withDefaults: false) }, createWithDecoder: { d in try B1PrePredefinedTextParams(from: d) }))
        B1ClassMetadata.ComplexTypes.priceListParams.registerFactory(ObjectFactory.with(create: { B1PrePriceListParams(withDefaults: false) }, createWithDecoder: { d in try B1PrePriceListParams(from: d) }))
        B1ClassMetadata.ComplexTypes.productTreeLine.registerFactory(ObjectFactory.with(create: { B1PreProductTreeLine(withDefaults: false) }, createWithDecoder: { d in try B1PreProductTreeLine(from: d) }))
        B1ClassMetadata.ComplexTypes.productTreeParams.registerFactory(ObjectFactory.with(create: { B1PreProductTreeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreProductTreeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.productTreeStage.registerFactory(ObjectFactory.with(create: { B1PreProductTreeStage(withDefaults: false) }, createWithDecoder: { d in try B1PreProductTreeStage(from: d) }))
        B1ClassMetadata.ComplexTypes.productionOrderLine.registerFactory(ObjectFactory.with(create: { B1PreProductionOrderLine(withDefaults: false) }, createWithDecoder: { d in try B1PreProductionOrderLine(from: d) }))
        B1ClassMetadata.ComplexTypes.productionOrderParams.registerFactory(ObjectFactory.with(create: { B1PreProductionOrderParams(withDefaults: false) }, createWithDecoder: { d in try B1PreProductionOrderParams(from: d) }))
        B1ClassMetadata.ComplexTypes.productionOrdersSalesOrderLine.registerFactory(ObjectFactory.with(create: { B1PreProductionOrdersSalesOrderLine(withDefaults: false) }, createWithDecoder: { d in try B1PreProductionOrdersSalesOrderLine(from: d) }))
        B1ClassMetadata.ComplexTypes.productionOrdersStage.registerFactory(ObjectFactory.with(create: { B1PreProductionOrdersStage(withDefaults: false) }, createWithDecoder: { d in try B1PreProductionOrdersStage(from: d) }))
        B1ClassMetadata.ComplexTypes.profitCenterParams.registerFactory(ObjectFactory.with(create: { B1PreProfitCenterParams(withDefaults: false) }, createWithDecoder: { d in try B1PreProfitCenterParams(from: d) }))
        B1ClassMetadata.ComplexTypes.progressiveTaxLine.registerFactory(ObjectFactory.with(create: { B1PreProgressiveTaxLine(withDefaults: false) }, createWithDecoder: { d in try B1PreProgressiveTaxLine(from: d) }))
        B1ClassMetadata.ComplexTypes.projectParams.registerFactory(ObjectFactory.with(create: { B1PreProjectParams(withDefaults: false) }, createWithDecoder: { d in try B1PreProjectParams(from: d) }))
        B1ClassMetadata.ComplexTypes.purchaseTaxInvoiceLine.registerFactory(ObjectFactory.with(create: { B1PrePurchaseTaxInvoiceLine(withDefaults: false) }, createWithDecoder: { d in try B1PrePurchaseTaxInvoiceLine(from: d) }))
        B1ClassMetadata.ComplexTypes.purchaseTaxInvoiceOperationCode.registerFactory(ObjectFactory.with(create: { B1PrePurchaseTaxInvoiceOperationCode(withDefaults: false) }, createWithDecoder: { d in try B1PrePurchaseTaxInvoiceOperationCode(from: d) }))
        B1ClassMetadata.ComplexTypes.queryAuthGroupParams.registerFactory(ObjectFactory.with(create: { B1PreQueryAuthGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreQueryAuthGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.queryCategoryParams.registerFactory(ObjectFactory.with(create: { B1PreQueryCategoryParams(withDefaults: false) }, createWithDecoder: { d in try B1PreQueryCategoryParams(from: d) }))
        B1ClassMetadata.ComplexTypes.queueMember.registerFactory(ObjectFactory.with(create: { B1PreQueueMember(withDefaults: false) }, createWithDecoder: { d in try B1PreQueueMember(from: d) }))
        B1ClassMetadata.ComplexTypes.queueParams.registerFactory(ObjectFactory.with(create: { B1PreQueueParams(withDefaults: false) }, createWithDecoder: { d in try B1PreQueueParams(from: d) }))
        B1ClassMetadata.ComplexTypes.rclRecurringExecutionParams.registerFactory(ObjectFactory.with(create: { B1PreRclRecurringExecutionParams(withDefaults: false) }, createWithDecoder: { d in try B1PreRclRecurringExecutionParams(from: d) }))
        B1ClassMetadata.ComplexTypes.rclRecurringTransaction.registerFactory(ObjectFactory.with(create: { B1PreRclRecurringTransaction(withDefaults: false) }, createWithDecoder: { d in try B1PreRclRecurringTransaction(from: d) }))
        B1ClassMetadata.ComplexTypes.rclRecurringTransactionParams.registerFactory(ObjectFactory.with(create: { B1PreRclRecurringTransactionParams(withDefaults: false) }, createWithDecoder: { d in try B1PreRclRecurringTransactionParams(from: d) }))
        B1ClassMetadata.ComplexTypes.recipient.registerFactory(ObjectFactory.with(create: { B1PreRecipient(withDefaults: false) }, createWithDecoder: { d in try B1PreRecipient(from: d) }))
        B1ClassMetadata.ComplexTypes.reconciliationBankStatementLine.registerFactory(ObjectFactory.with(create: { B1PreReconciliationBankStatementLine(withDefaults: false) }, createWithDecoder: { d in try B1PreReconciliationBankStatementLine(from: d) }))
        B1ClassMetadata.ComplexTypes.reconciliationJournalEntryLine.registerFactory(ObjectFactory.with(create: { B1PreReconciliationJournalEntryLine(withDefaults: false) }, createWithDecoder: { d in try B1PreReconciliationJournalEntryLine(from: d) }))
        B1ClassMetadata.ComplexTypes.recordsetParams.registerFactory(ObjectFactory.with(create: { B1PreRecordsetParams(withDefaults: false) }, createWithDecoder: { d in try B1PreRecordsetParams(from: d) }))
        B1ClassMetadata.ComplexTypes.relationshipParams.registerFactory(ObjectFactory.with(create: { B1PreRelationshipParams(withDefaults: false) }, createWithDecoder: { d in try B1PreRelationshipParams(from: d) }))
        B1ClassMetadata.ComplexTypes.reportInputParams.registerFactory(ObjectFactory.with(create: { B1PreReportInputParams(withDefaults: false) }, createWithDecoder: { d in try B1PreReportInputParams(from: d) }))
        B1ClassMetadata.ComplexTypes.reportLayout.registerFactory(ObjectFactory.with(create: { B1PreReportLayout(withDefaults: false) }, createWithDecoder: { d in try B1PreReportLayout(from: d) }))
        B1ClassMetadata.ComplexTypes.reportLayoutItem.registerFactory(ObjectFactory.with(create: { B1PreReportLayoutItem(withDefaults: false) }, createWithDecoder: { d in try B1PreReportLayoutItem(from: d) }))
        B1ClassMetadata.ComplexTypes.reportLayoutParams.registerFactory(ObjectFactory.with(create: { B1PreReportLayoutParams(withDefaults: false) }, createWithDecoder: { d in try B1PreReportLayoutParams(from: d) }))
        B1ClassMetadata.ComplexTypes.reportLayoutPrintParams.registerFactory(ObjectFactory.with(create: { B1PreReportLayoutPrintParams(withDefaults: false) }, createWithDecoder: { d in try B1PreReportLayoutPrintParams(from: d) }))
        B1ClassMetadata.ComplexTypes.reportLayoutTranslationLine.registerFactory(ObjectFactory.with(create: { B1PreReportLayoutTranslationLine(withDefaults: false) }, createWithDecoder: { d in try B1PreReportLayoutTranslationLine(from: d) }))
        B1ClassMetadata.ComplexTypes.reportParams.registerFactory(ObjectFactory.with(create: { B1PreReportParams(withDefaults: false) }, createWithDecoder: { d in try B1PreReportParams(from: d) }))
        B1ClassMetadata.ComplexTypes.reportTypeParams.registerFactory(ObjectFactory.with(create: { B1PreReportTypeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreReportTypeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.resourceCapacityParams.registerFactory(ObjectFactory.with(create: { B1PreResourceCapacityParams(withDefaults: false) }, createWithDecoder: { d in try B1PreResourceCapacityParams(from: d) }))
        B1ClassMetadata.ComplexTypes.resourceCapacityWithFilterParams.registerFactory(ObjectFactory.with(create: { B1PreResourceCapacityWithFilterParams(withDefaults: false) }, createWithDecoder: { d in try B1PreResourceCapacityWithFilterParams(from: d) }))
        B1ClassMetadata.ComplexTypes.resourceDailyCapacity.registerFactory(ObjectFactory.with(create: { B1PreResourceDailyCapacity(withDefaults: false) }, createWithDecoder: { d in try B1PreResourceDailyCapacity(from: d) }))
        B1ClassMetadata.ComplexTypes.resourceEmployee.registerFactory(ObjectFactory.with(create: { B1PreResourceEmployee(withDefaults: false) }, createWithDecoder: { d in try B1PreResourceEmployee(from: d) }))
        B1ClassMetadata.ComplexTypes.resourceFixedAsset.registerFactory(ObjectFactory.with(create: { B1PreResourceFixedAsset(withDefaults: false) }, createWithDecoder: { d in try B1PreResourceFixedAsset(from: d) }))
        B1ClassMetadata.ComplexTypes.resourceGroupParams.registerFactory(ObjectFactory.with(create: { B1PreResourceGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreResourceGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.resourceParams.registerFactory(ObjectFactory.with(create: { B1PreResourceParams(withDefaults: false) }, createWithDecoder: { d in try B1PreResourceParams(from: d) }))
        B1ClassMetadata.ComplexTypes.resourcePropertyParams.registerFactory(ObjectFactory.with(create: { B1PreResourcePropertyParams(withDefaults: false) }, createWithDecoder: { d in try B1PreResourcePropertyParams(from: d) }))
        B1ClassMetadata.ComplexTypes.resourceWarehouse.registerFactory(ObjectFactory.with(create: { B1PreResourceWarehouse(withDefaults: false) }, createWithDecoder: { d in try B1PreResourceWarehouse(from: d) }))
        B1ClassMetadata.ComplexTypes.retornoCodeParams.registerFactory(ObjectFactory.with(create: { B1PreRetornoCodeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreRetornoCodeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.roundedData.registerFactory(ObjectFactory.with(create: { B1PreRoundedData(withDefaults: false) }, createWithDecoder: { d in try B1PreRoundedData(from: d) }))
        B1ClassMetadata.ComplexTypes.routeStageParams.registerFactory(ObjectFactory.with(create: { B1PreRouteStageParams(withDefaults: false) }, createWithDecoder: { d in try B1PreRouteStageParams(from: d) }))
        B1ClassMetadata.ComplexTypes.routingDateCalculationInput.registerFactory(ObjectFactory.with(create: { B1PreRoutingDateCalculationInput(withDefaults: false) }, createWithDecoder: { d in try B1PreRoutingDateCalculationInput(from: d) }))
        B1ClassMetadata.ComplexTypes.routingDateCalculationOutput.registerFactory(ObjectFactory.with(create: { B1PreRoutingDateCalculationOutput(withDefaults: false) }, createWithDecoder: { d in try B1PreRoutingDateCalculationOutput(from: d) }))
        B1ClassMetadata.ComplexTypes.snbLines.registerFactory(ObjectFactory.with(create: { B1PreSNBLines(withDefaults: false) }, createWithDecoder: { d in try B1PreSNBLines(from: d) }))
        B1ClassMetadata.ComplexTypes.salesForecastLine.registerFactory(ObjectFactory.with(create: { B1PreSalesForecastLine(withDefaults: false) }, createWithDecoder: { d in try B1PreSalesForecastLine(from: d) }))
        B1ClassMetadata.ComplexTypes.salesForecastParams.registerFactory(ObjectFactory.with(create: { B1PreSalesForecastParams(withDefaults: false) }, createWithDecoder: { d in try B1PreSalesForecastParams(from: d) }))
        B1ClassMetadata.ComplexTypes.salesOpportunitiesCompetitionItem.registerFactory(ObjectFactory.with(create: { B1PreSalesOpportunitiesCompetitionItem(withDefaults: false) }, createWithDecoder: { d in try B1PreSalesOpportunitiesCompetitionItem(from: d) }))
        B1ClassMetadata.ComplexTypes.salesOpportunitiesInterest.registerFactory(ObjectFactory.with(create: { B1PreSalesOpportunitiesInterest(withDefaults: false) }, createWithDecoder: { d in try B1PreSalesOpportunitiesInterest(from: d) }))
        B1ClassMetadata.ComplexTypes.salesOpportunitiesLine.registerFactory(ObjectFactory.with(create: { B1PreSalesOpportunitiesLine(withDefaults: false) }, createWithDecoder: { d in try B1PreSalesOpportunitiesLine(from: d) }))
        B1ClassMetadata.ComplexTypes.salesOpportunitiesParams.registerFactory(ObjectFactory.with(create: { B1PreSalesOpportunitiesParams(withDefaults: false) }, createWithDecoder: { d in try B1PreSalesOpportunitiesParams(from: d) }))
        B1ClassMetadata.ComplexTypes.salesOpportunitiesPartner.registerFactory(ObjectFactory.with(create: { B1PreSalesOpportunitiesPartner(withDefaults: false) }, createWithDecoder: { d in try B1PreSalesOpportunitiesPartner(from: d) }))
        B1ClassMetadata.ComplexTypes.salesOpportunitiesReason.registerFactory(ObjectFactory.with(create: { B1PreSalesOpportunitiesReason(withDefaults: false) }, createWithDecoder: { d in try B1PreSalesOpportunitiesReason(from: d) }))
        B1ClassMetadata.ComplexTypes.salesOpportunityCompetitorSetupParams.registerFactory(ObjectFactory.with(create: { B1PreSalesOpportunityCompetitorSetupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreSalesOpportunityCompetitorSetupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.salesOpportunityInterestSetupParams.registerFactory(ObjectFactory.with(create: { B1PreSalesOpportunityInterestSetupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreSalesOpportunityInterestSetupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.salesOpportunityReasonSetupParams.registerFactory(ObjectFactory.with(create: { B1PreSalesOpportunityReasonSetupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreSalesOpportunityReasonSetupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.salesOpportunitySourceSetupParams.registerFactory(ObjectFactory.with(create: { B1PreSalesOpportunitySourceSetupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreSalesOpportunitySourceSetupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.salesPersonParams.registerFactory(ObjectFactory.with(create: { B1PreSalesPersonParams(withDefaults: false) }, createWithDecoder: { d in try B1PreSalesPersonParams(from: d) }))
        B1ClassMetadata.ComplexTypes.salesStageParams.registerFactory(ObjectFactory.with(create: { B1PreSalesStageParams(withDefaults: false) }, createWithDecoder: { d in try B1PreSalesStageParams(from: d) }))
        B1ClassMetadata.ComplexTypes.salesTaxAuthoritiesTypeParams.registerFactory(ObjectFactory.with(create: { B1PreSalesTaxAuthoritiesTypeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreSalesTaxAuthoritiesTypeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.salesTaxAuthorityParams.registerFactory(ObjectFactory.with(create: { B1PreSalesTaxAuthorityParams(withDefaults: false) }, createWithDecoder: { d in try B1PreSalesTaxAuthorityParams(from: d) }))
        B1ClassMetadata.ComplexTypes.salesTaxCodeParams.registerFactory(ObjectFactory.with(create: { B1PreSalesTaxCodeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreSalesTaxCodeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.salesTaxCodesLine.registerFactory(ObjectFactory.with(create: { B1PreSalesTaxCodesLine(withDefaults: false) }, createWithDecoder: { d in try B1PreSalesTaxCodesLine(from: d) }))
        B1ClassMetadata.ComplexTypes.salesTaxInvoiceLine.registerFactory(ObjectFactory.with(create: { B1PreSalesTaxInvoiceLine(withDefaults: false) }, createWithDecoder: { d in try B1PreSalesTaxInvoiceLine(from: d) }))
        B1ClassMetadata.ComplexTypes.salesTaxInvoiceOperationCode.registerFactory(ObjectFactory.with(create: { B1PreSalesTaxInvoiceOperationCode(withDefaults: false) }, createWithDecoder: { d in try B1PreSalesTaxInvoiceOperationCode(from: d) }))
        B1ClassMetadata.ComplexTypes.sectionParams.registerFactory(ObjectFactory.with(create: { B1PreSectionParams(withDefaults: false) }, createWithDecoder: { d in try B1PreSectionParams(from: d) }))
        B1ClassMetadata.ComplexTypes.sensitiveDataAccess.registerFactory(ObjectFactory.with(create: { B1PreSensitiveDataAccess(withDefaults: false) }, createWithDecoder: { d in try B1PreSensitiveDataAccess(from: d) }))
        B1ClassMetadata.ComplexTypes.serialNumber.registerFactory(ObjectFactory.with(create: { B1PreSerialNumber(withDefaults: false) }, createWithDecoder: { d in try B1PreSerialNumber(from: d) }))
        B1ClassMetadata.ComplexTypes.serialNumberDetailParams.registerFactory(ObjectFactory.with(create: { B1PreSerialNumberDetailParams(withDefaults: false) }, createWithDecoder: { d in try B1PreSerialNumberDetailParams(from: d) }))
        B1ClassMetadata.ComplexTypes.series.registerFactory(ObjectFactory.with(create: { B1PreSeries(withDefaults: false) }, createWithDecoder: { d in try B1PreSeries(from: d) }))
        B1ClassMetadata.ComplexTypes.seriesLine.registerFactory(ObjectFactory.with(create: { B1PreSeriesLine(withDefaults: false) }, createWithDecoder: { d in try B1PreSeriesLine(from: d) }))
        B1ClassMetadata.ComplexTypes.seriesParams.registerFactory(ObjectFactory.with(create: { B1PreSeriesParams(withDefaults: false) }, createWithDecoder: { d in try B1PreSeriesParams(from: d) }))
        B1ClassMetadata.ComplexTypes.serviceAppReport.registerFactory(ObjectFactory.with(create: { B1PreServiceAppReport(withDefaults: false) }, createWithDecoder: { d in try B1PreServiceAppReport(from: d) }))
        B1ClassMetadata.ComplexTypes.serviceAppReportContent.registerFactory(ObjectFactory.with(create: { B1PreServiceAppReportContent(withDefaults: false) }, createWithDecoder: { d in try B1PreServiceAppReportContent(from: d) }))
        B1ClassMetadata.ComplexTypes.serviceAppReportParams.registerFactory(ObjectFactory.with(create: { B1PreServiceAppReportParams(withDefaults: false) }, createWithDecoder: { d in try B1PreServiceAppReportParams(from: d) }))
        B1ClassMetadata.ComplexTypes.serviceCallActivity.registerFactory(ObjectFactory.with(create: { B1PreServiceCallActivity(withDefaults: false) }, createWithDecoder: { d in try B1PreServiceCallActivity(from: d) }))
        B1ClassMetadata.ComplexTypes.serviceCallBPAddressComponent.registerFactory(ObjectFactory.with(create: { B1PreServiceCallBPAddressComponent(withDefaults: false) }, createWithDecoder: { d in try B1PreServiceCallBPAddressComponent(from: d) }))
        B1ClassMetadata.ComplexTypes.serviceCallInventoryExpense.registerFactory(ObjectFactory.with(create: { B1PreServiceCallInventoryExpense(withDefaults: false) }, createWithDecoder: { d in try B1PreServiceCallInventoryExpense(from: d) }))
        B1ClassMetadata.ComplexTypes.serviceCallOriginParams.registerFactory(ObjectFactory.with(create: { B1PreServiceCallOriginParams(withDefaults: false) }, createWithDecoder: { d in try B1PreServiceCallOriginParams(from: d) }))
        B1ClassMetadata.ComplexTypes.serviceCallParams.registerFactory(ObjectFactory.with(create: { B1PreServiceCallParams(withDefaults: false) }, createWithDecoder: { d in try B1PreServiceCallParams(from: d) }))
        B1ClassMetadata.ComplexTypes.serviceCallProblemSubTypeParams.registerFactory(ObjectFactory.with(create: { B1PreServiceCallProblemSubTypeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreServiceCallProblemSubTypeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.serviceCallProblemTypeParams.registerFactory(ObjectFactory.with(create: { B1PreServiceCallProblemTypeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreServiceCallProblemTypeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.serviceCallScheduling.registerFactory(ObjectFactory.with(create: { B1PreServiceCallScheduling(withDefaults: false) }, createWithDecoder: { d in try B1PreServiceCallScheduling(from: d) }))
        B1ClassMetadata.ComplexTypes.serviceCallSolution.registerFactory(ObjectFactory.with(create: { B1PreServiceCallSolution(withDefaults: false) }, createWithDecoder: { d in try B1PreServiceCallSolution(from: d) }))
        B1ClassMetadata.ComplexTypes.serviceCallSolutionStatusParams.registerFactory(ObjectFactory.with(create: { B1PreServiceCallSolutionStatusParams(withDefaults: false) }, createWithDecoder: { d in try B1PreServiceCallSolutionStatusParams(from: d) }))
        B1ClassMetadata.ComplexTypes.serviceCallStatusParams.registerFactory(ObjectFactory.with(create: { B1PreServiceCallStatusParams(withDefaults: false) }, createWithDecoder: { d in try B1PreServiceCallStatusParams(from: d) }))
        B1ClassMetadata.ComplexTypes.serviceCallTypeParams.registerFactory(ObjectFactory.with(create: { B1PreServiceCallTypeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreServiceCallTypeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.serviceContractParams.registerFactory(ObjectFactory.with(create: { B1PreServiceContractParams(withDefaults: false) }, createWithDecoder: { d in try B1PreServiceContractParams(from: d) }))
        B1ClassMetadata.ComplexTypes.serviceContractLine.registerFactory(ObjectFactory.with(create: { B1PreServiceContractLine(withDefaults: false) }, createWithDecoder: { d in try B1PreServiceContractLine(from: d) }))
        B1ClassMetadata.ComplexTypes.serviceGroupParams.registerFactory(ObjectFactory.with(create: { B1PreServiceGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreServiceGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.serviceTaxPostingParams.registerFactory(ObjectFactory.with(create: { B1PreServiceTaxPostingParams(withDefaults: false) }, createWithDecoder: { d in try B1PreServiceTaxPostingParams(from: d) }))
        B1ClassMetadata.ComplexTypes.shippingTypeParams.registerFactory(ObjectFactory.with(create: { B1PreShippingTypeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreShippingTypeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.showDifferenceParams.registerFactory(ObjectFactory.with(create: { B1PreShowDifferenceParams(withDefaults: false) }, createWithDecoder: { d in try B1PreShowDifferenceParams(from: d) }))
        B1ClassMetadata.ComplexTypes.specialPriceDataArea.registerFactory(ObjectFactory.with(create: { B1PreSpecialPriceDataArea(withDefaults: false) }, createWithDecoder: { d in try B1PreSpecialPriceDataArea(from: d) }))
        B1ClassMetadata.ComplexTypes.specialPriceParams.registerFactory(ObjectFactory.with(create: { B1PreSpecialPriceParams(withDefaults: false) }, createWithDecoder: { d in try B1PreSpecialPriceParams(from: d) }))
        B1ClassMetadata.ComplexTypes.specialPriceQuantityArea.registerFactory(ObjectFactory.with(create: { B1PreSpecialPriceQuantityArea(withDefaults: false) }, createWithDecoder: { d in try B1PreSpecialPriceQuantityArea(from: d) }))
        B1ClassMetadata.ComplexTypes.stateParams.registerFactory(ObjectFactory.with(create: { B1PreStateParams(withDefaults: false) }, createWithDecoder: { d in try B1PreStateParams(from: d) }))
        B1ClassMetadata.ComplexTypes.stockTakingParams.registerFactory(ObjectFactory.with(create: { B1PreStockTakingParams(withDefaults: false) }, createWithDecoder: { d in try B1PreStockTakingParams(from: d) }))
        B1ClassMetadata.ComplexTypes.stockTransferLine.registerFactory(ObjectFactory.with(create: { B1PreStockTransferLine(withDefaults: false) }, createWithDecoder: { d in try B1PreStockTransferLine(from: d) }))
        B1ClassMetadata.ComplexTypes.stockTransferLinesBinAllocation.registerFactory(ObjectFactory.with(create: { B1PreStockTransferLinesBinAllocation(withDefaults: false) }, createWithDecoder: { d in try B1PreStockTransferLinesBinAllocation(from: d) }))
        B1ClassMetadata.ComplexTypes.stockTransferParams.registerFactory(ObjectFactory.with(create: { B1PreStockTransferParams(withDefaults: false) }, createWithDecoder: { d in try B1PreStockTransferParams(from: d) }))
        B1ClassMetadata.ComplexTypes.stockTransferTaxExtension.registerFactory(ObjectFactory.with(create: { B1PreStockTransferTaxExtension(withDefaults: false) }, createWithDecoder: { d in try B1PreStockTransferTaxExtension(from: d) }))
        B1ClassMetadata.ComplexTypes.stockTransferApprovalRequest.registerFactory(ObjectFactory.with(create: { B1PreStockTransferApprovalRequest(withDefaults: false) }, createWithDecoder: { d in try B1PreStockTransferApprovalRequest(from: d) }))
        B1ClassMetadata.ComplexTypes.tableInfo.registerFactory(ObjectFactory.with(create: { B1PreTableInfo(withDefaults: false) }, createWithDecoder: { d in try B1PreTableInfo(from: d) }))
        B1ClassMetadata.ComplexTypes.targetGroupParams.registerFactory(ObjectFactory.with(create: { B1PreTargetGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreTargetGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.targetGroupsDetail.registerFactory(ObjectFactory.with(create: { B1PreTargetGroupsDetail(withDefaults: false) }, createWithDecoder: { d in try B1PreTargetGroupsDetail(from: d) }))
        B1ClassMetadata.ComplexTypes.taxCodeDeterminationParams.registerFactory(ObjectFactory.with(create: { B1PreTaxCodeDeterminationParams(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxCodeDeterminationParams(from: d) }))
        B1ClassMetadata.ComplexTypes.taxCodeDeterminationTCDByUsage.registerFactory(ObjectFactory.with(create: { B1PreTaxCodeDeterminationTCDByUsage(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxCodeDeterminationTCDByUsage(from: d) }))
        B1ClassMetadata.ComplexTypes.taxCodeDeterminationTCDDefaultWT.registerFactory(ObjectFactory.with(create: { B1PreTaxCodeDeterminationTCDDefaultWT(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxCodeDeterminationTCDDefaultWT(from: d) }))
        B1ClassMetadata.ComplexTypes.taxCodeDeterminationTCDKeyField.registerFactory(ObjectFactory.with(create: { B1PreTaxCodeDeterminationTCDKeyField(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxCodeDeterminationTCDKeyField(from: d) }))
        B1ClassMetadata.ComplexTypes.taxCodeDeterminationTCDKeyFieldValue.registerFactory(ObjectFactory.with(create: { B1PreTaxCodeDeterminationTCDKeyFieldValue(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxCodeDeterminationTCDKeyFieldValue(from: d) }))
        B1ClassMetadata.ComplexTypes.taxCodeDeterminationTCDKeyFieldValueDefaultWT.registerFactory(ObjectFactory.with(create: { B1PreTaxCodeDeterminationTCDKeyFieldValueDefaultWT(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxCodeDeterminationTCDKeyFieldValueDefaultWT(from: d) }))
        B1ClassMetadata.ComplexTypes.taxCodeDeterminationTCDKeyFieldValuePeriod.registerFactory(ObjectFactory.with(create: { B1PreTaxCodeDeterminationTCDKeyFieldValuePeriod(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxCodeDeterminationTCDKeyFieldValuePeriod(from: d) }))
        B1ClassMetadata.ComplexTypes.taxCodeDeterminationTCDKeyFieldValuePeriodByUsage.registerFactory(ObjectFactory.with(create: { B1PreTaxCodeDeterminationTCDKeyFieldValuePeriodByUsage(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxCodeDeterminationTCDKeyFieldValuePeriodByUsage(from: d) }))
        B1ClassMetadata.ComplexTypes.taxCodeDeterminationTCDParams.registerFactory(ObjectFactory.with(create: { B1PreTaxCodeDeterminationTCDParams(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxCodeDeterminationTCDParams(from: d) }))
        B1ClassMetadata.ComplexTypes.taxDefinition.registerFactory(ObjectFactory.with(create: { B1PreTaxDefinition(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxDefinition(from: d) }))
        B1ClassMetadata.ComplexTypes.taxExtension.registerFactory(ObjectFactory.with(create: { B1PreTaxExtension(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxExtension(from: d) }))
        B1ClassMetadata.ComplexTypes.taxInvoiceParams.registerFactory(ObjectFactory.with(create: { B1PreTaxInvoiceParams(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxInvoiceParams(from: d) }))
        B1ClassMetadata.ComplexTypes.taxInvoiceReportLine.registerFactory(ObjectFactory.with(create: { B1PreTaxInvoiceReportLine(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxInvoiceReportLine(from: d) }))
        B1ClassMetadata.ComplexTypes.taxInvoiceReportParams.registerFactory(ObjectFactory.with(create: { B1PreTaxInvoiceReportParams(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxInvoiceReportParams(from: d) }))
        B1ClassMetadata.ComplexTypes.taxReportAccount.registerFactory(ObjectFactory.with(create: { B1PreTaxReportAccount(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxReportAccount(from: d) }))
        B1ClassMetadata.ComplexTypes.taxReportBusinessPartner.registerFactory(ObjectFactory.with(create: { B1PreTaxReportBusinessPartner(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxReportBusinessPartner(from: d) }))
        B1ClassMetadata.ComplexTypes.taxReportDocument.registerFactory(ObjectFactory.with(create: { B1PreTaxReportDocument(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxReportDocument(from: d) }))
        B1ClassMetadata.ComplexTypes.taxReportFilterParams.registerFactory(ObjectFactory.with(create: { B1PreTaxReportFilterParams(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxReportFilterParams(from: d) }))
        B1ClassMetadata.ComplexTypes.taxReportGroup.registerFactory(ObjectFactory.with(create: { B1PreTaxReportGroup(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxReportGroup(from: d) }))
        B1ClassMetadata.ComplexTypes.taxReportSeries.registerFactory(ObjectFactory.with(create: { B1PreTaxReportSeries(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxReportSeries(from: d) }))
        B1ClassMetadata.ComplexTypes.taxWebSiteParams.registerFactory(ObjectFactory.with(create: { B1PreTaxWebSiteParams(withDefaults: false) }, createWithDecoder: { d in try B1PreTaxWebSiteParams(from: d) }))
        B1ClassMetadata.ComplexTypes.teamCounter.registerFactory(ObjectFactory.with(create: { B1PreTeamCounter(withDefaults: false) }, createWithDecoder: { d in try B1PreTeamCounter(from: d) }))
        B1ClassMetadata.ComplexTypes.teamMember.registerFactory(ObjectFactory.with(create: { B1PreTeamMember(withDefaults: false) }, createWithDecoder: { d in try B1PreTeamMember(from: d) }))
        B1ClassMetadata.ComplexTypes.teamParams.registerFactory(ObjectFactory.with(create: { B1PreTeamParams(withDefaults: false) }, createWithDecoder: { d in try B1PreTeamParams(from: d) }))
        B1ClassMetadata.ComplexTypes.technicianSchedulings.registerFactory(ObjectFactory.with(create: { B1PreTechnicianSchedulings(withDefaults: false) }, createWithDecoder: { d in try B1PreTechnicianSchedulings(from: d) }))
        B1ClassMetadata.ComplexTypes.technicianSchedulingsParams.registerFactory(ObjectFactory.with(create: { B1PreTechnicianSchedulingsParams(withDefaults: false) }, createWithDecoder: { d in try B1PreTechnicianSchedulingsParams(from: d) }))
        B1ClassMetadata.ComplexTypes.technicianSettings.registerFactory(ObjectFactory.with(create: { B1PreTechnicianSettings(withDefaults: false) }, createWithDecoder: { d in try B1PreTechnicianSettings(from: d) }))
        B1ClassMetadata.ComplexTypes.technicianSettingsGroup.registerFactory(ObjectFactory.with(create: { B1PreTechnicianSettingsGroup(withDefaults: false) }, createWithDecoder: { d in try B1PreTechnicianSettingsGroup(from: d) }))
        B1ClassMetadata.ComplexTypes.technicianSettingsGroupParams.registerFactory(ObjectFactory.with(create: { B1PreTechnicianSettingsGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreTechnicianSettingsGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.technicianSettingsParams.registerFactory(ObjectFactory.with(create: { B1PreTechnicianSettingsParams(withDefaults: false) }, createWithDecoder: { d in try B1PreTechnicianSettingsParams(from: d) }))
        B1ClassMetadata.ComplexTypes.terminationReasonParams.registerFactory(ObjectFactory.with(create: { B1PreTerminationReasonParams(withDefaults: false) }, createWithDecoder: { d in try B1PreTerminationReasonParams(from: d) }))
        B1ClassMetadata.ComplexTypes.territoryParams.registerFactory(ObjectFactory.with(create: { B1PreTerritoryParams(withDefaults: false) }, createWithDecoder: { d in try B1PreTerritoryParams(from: d) }))
        B1ClassMetadata.ComplexTypes.trackingNoteBroker.registerFactory(ObjectFactory.with(create: { B1PreTrackingNoteBroker(withDefaults: false) }, createWithDecoder: { d in try B1PreTrackingNoteBroker(from: d) }))
        B1ClassMetadata.ComplexTypes.trackingNoteItem.registerFactory(ObjectFactory.with(create: { B1PreTrackingNoteItem(withDefaults: false) }, createWithDecoder: { d in try B1PreTrackingNoteItem(from: d) }))
        B1ClassMetadata.ComplexTypes.trackingNoteParams.registerFactory(ObjectFactory.with(create: { B1PreTrackingNoteParams(withDefaults: false) }, createWithDecoder: { d in try B1PreTrackingNoteParams(from: d) }))
        B1ClassMetadata.ComplexTypes.transactionCodeParams.registerFactory(ObjectFactory.with(create: { B1PreTransactionCodeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreTransactionCodeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.translationsInUserLanguage.registerFactory(ObjectFactory.with(create: { B1PreTranslationsInUserLanguage(withDefaults: false) }, createWithDecoder: { d in try B1PreTranslationsInUserLanguage(from: d) }))
        B1ClassMetadata.ComplexTypes.transportationDocumentLineData.registerFactory(ObjectFactory.with(create: { B1PreTransportationDocumentLineData(withDefaults: false) }, createWithDecoder: { d in try B1PreTransportationDocumentLineData(from: d) }))
        B1ClassMetadata.ComplexTypes.transportationDocumentParams.registerFactory(ObjectFactory.with(create: { B1PreTransportationDocumentParams(withDefaults: false) }, createWithDecoder: { d in try B1PreTransportationDocumentParams(from: d) }))
        B1ClassMetadata.ComplexTypes.unitOfMeasurementGroupParams.registerFactory(ObjectFactory.with(create: { B1PreUnitOfMeasurementGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreUnitOfMeasurementGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.unitOfMeasurementParams.registerFactory(ObjectFactory.with(create: { B1PreUnitOfMeasurementParams(withDefaults: false) }, createWithDecoder: { d in try B1PreUnitOfMeasurementParams(from: d) }))
        B1ClassMetadata.ComplexTypes.uoMGroupDefinition.registerFactory(ObjectFactory.with(create: { B1PreUoMGroupDefinition(withDefaults: false) }, createWithDecoder: { d in try B1PreUoMGroupDefinition(from: d) }))
        B1ClassMetadata.ComplexTypes.uoMPrice.registerFactory(ObjectFactory.with(create: { B1PreUoMPrice(withDefaults: false) }, createWithDecoder: { d in try B1PreUoMPrice(from: d) }))
        B1ClassMetadata.ComplexTypes.updateUserLicenseParams.registerFactory(ObjectFactory.with(create: { B1PreUpdateUserLicenseParams(withDefaults: false) }, createWithDecoder: { d in try B1PreUpdateUserLicenseParams(from: d) }))
        B1ClassMetadata.ComplexTypes.userActionRecordItem.registerFactory(ObjectFactory.with(create: { B1PreUserActionRecordItem(withDefaults: false) }, createWithDecoder: { d in try B1PreUserActionRecordItem(from: d) }))
        B1ClassMetadata.ComplexTypes.userBranchAssignmentItem.registerFactory(ObjectFactory.with(create: { B1PreUserBranchAssignmentItem(withDefaults: false) }, createWithDecoder: { d in try B1PreUserBranchAssignmentItem(from: d) }))
        B1ClassMetadata.ComplexTypes.userDefaultGroupParams.registerFactory(ObjectFactory.with(create: { B1PreUserDefaultGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreUserDefaultGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.userFieldMDParams.registerFactory(ObjectFactory.with(create: { B1PreUserFieldMDParams(withDefaults: false) }, createWithDecoder: { d in try B1PreUserFieldMDParams(from: d) }))
        B1ClassMetadata.ComplexTypes.userGroupByUserItem.registerFactory(ObjectFactory.with(create: { B1PreUserGroupByUserItem(withDefaults: false) }, createWithDecoder: { d in try B1PreUserGroupByUserItem(from: d) }))
        B1ClassMetadata.ComplexTypes.userGroupParams.registerFactory(ObjectFactory.with(create: { B1PreUserGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreUserGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.userKeyParams.registerFactory(ObjectFactory.with(create: { B1PreUserKeyParams(withDefaults: false) }, createWithDecoder: { d in try B1PreUserKeyParams(from: d) }))
        B1ClassMetadata.ComplexTypes.userKeysMDElement.registerFactory(ObjectFactory.with(create: { B1PreUserKeysMDElement(withDefaults: false) }, createWithDecoder: { d in try B1PreUserKeysMDElement(from: d) }))
        B1ClassMetadata.ComplexTypes.userLanguageParams.registerFactory(ObjectFactory.with(create: { B1PreUserLanguageParams(withDefaults: false) }, createWithDecoder: { d in try B1PreUserLanguageParams(from: d) }))
        B1ClassMetadata.ComplexTypes.userMenuItem.registerFactory(ObjectFactory.with(create: { B1PreUserMenuItem(withDefaults: false) }, createWithDecoder: { d in try B1PreUserMenuItem(from: d) }))
        B1ClassMetadata.ComplexTypes.userMenuParams.registerFactory(ObjectFactory.with(create: { B1PreUserMenuParams(withDefaults: false) }, createWithDecoder: { d in try B1PreUserMenuParams(from: d) }))
        B1ClassMetadata.ComplexTypes.userObjectMDChildTable.registerFactory(ObjectFactory.with(create: { B1PreUserObjectMDChildTable(withDefaults: false) }, createWithDecoder: { d in try B1PreUserObjectMDChildTable(from: d) }))
        B1ClassMetadata.ComplexTypes.userObjectMDEnhancedFormColumn.registerFactory(ObjectFactory.with(create: { B1PreUserObjectMDEnhancedFormColumn(withDefaults: false) }, createWithDecoder: { d in try B1PreUserObjectMDEnhancedFormColumn(from: d) }))
        B1ClassMetadata.ComplexTypes.userObjectMDFindColumn.registerFactory(ObjectFactory.with(create: { B1PreUserObjectMDFindColumn(withDefaults: false) }, createWithDecoder: { d in try B1PreUserObjectMDFindColumn(from: d) }))
        B1ClassMetadata.ComplexTypes.userObjectMDFormColumn.registerFactory(ObjectFactory.with(create: { B1PreUserObjectMDFormColumn(withDefaults: false) }, createWithDecoder: { d in try B1PreUserObjectMDFormColumn(from: d) }))
        B1ClassMetadata.ComplexTypes.userObjectsMDParams.registerFactory(ObjectFactory.with(create: { B1PreUserObjectsMDParams(withDefaults: false) }, createWithDecoder: { d in try B1PreUserObjectsMDParams(from: d) }))
        B1ClassMetadata.ComplexTypes.userParams.registerFactory(ObjectFactory.with(create: { B1PreUserParams(withDefaults: false) }, createWithDecoder: { d in try B1PreUserParams(from: d) }))
        B1ClassMetadata.ComplexTypes.userPermissionForm.registerFactory(ObjectFactory.with(create: { B1PreUserPermissionForm(withDefaults: false) }, createWithDecoder: { d in try B1PreUserPermissionForm(from: d) }))
        B1ClassMetadata.ComplexTypes.userPermissionItem.registerFactory(ObjectFactory.with(create: { B1PreUserPermissionItem(withDefaults: false) }, createWithDecoder: { d in try B1PreUserPermissionItem(from: d) }))
        B1ClassMetadata.ComplexTypes.userPermissionTreeParams.registerFactory(ObjectFactory.with(create: { B1PreUserPermissionTreeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreUserPermissionTreeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.userQueryParams.registerFactory(ObjectFactory.with(create: { B1PreUserQueryParams(withDefaults: false) }, createWithDecoder: { d in try B1PreUserQueryParams(from: d) }))
        B1ClassMetadata.ComplexTypes.userTableParams.registerFactory(ObjectFactory.with(create: { B1PreUserTableParams(withDefaults: false) }, createWithDecoder: { d in try B1PreUserTableParams(from: d) }))
        B1ClassMetadata.ComplexTypes.vmThirdPartyValuesData.registerFactory(ObjectFactory.with(create: { B1PreVMThirdPartyValuesData(withDefaults: false) }, createWithDecoder: { d in try B1PreVMThirdPartyValuesData(from: d) }))
        B1ClassMetadata.ComplexTypes.validValueMD.registerFactory(ObjectFactory.with(create: { B1PreValidValueMD(withDefaults: false) }, createWithDecoder: { d in try B1PreValidValueMD(from: d) }))
        B1ClassMetadata.ComplexTypes.valueMappingCommunicationParams.registerFactory(ObjectFactory.with(create: { B1PreValueMappingCommunicationParams(withDefaults: false) }, createWithDecoder: { d in try B1PreValueMappingCommunicationParams(from: d) }))
        B1ClassMetadata.ComplexTypes.valueMappingParams.registerFactory(ObjectFactory.with(create: { B1PreValueMappingParams(withDefaults: false) }, createWithDecoder: { d in try B1PreValueMappingParams(from: d) }))
        B1ClassMetadata.ComplexTypes.vatGroupParams.registerFactory(ObjectFactory.with(create: { B1PreVatGroupParams(withDefaults: false) }, createWithDecoder: { d in try B1PreVatGroupParams(from: d) }))
        B1ClassMetadata.ComplexTypes.vatGroupsLine.registerFactory(ObjectFactory.with(create: { B1PreVatGroupsLine(withDefaults: false) }, createWithDecoder: { d in try B1PreVatGroupsLine(from: d) }))
        B1ClassMetadata.ComplexTypes.wipMapping.registerFactory(ObjectFactory.with(create: { B1PreWIPMapping(withDefaults: false) }, createWithDecoder: { d in try B1PreWIPMapping(from: d) }))
        B1ClassMetadata.ComplexTypes.wtdbp.registerFactory(ObjectFactory.with(create: { B1PreWtdbp(withDefaults: false) }, createWithDecoder: { d in try B1PreWtdbp(from: d) }))
        B1ClassMetadata.ComplexTypes.wtdCodeParams.registerFactory(ObjectFactory.with(create: { B1PreWTDCodeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreWTDCodeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.wtdEffectiveDate.registerFactory(ObjectFactory.with(create: { B1PreWTDEffectiveDate(withDefaults: false) }, createWithDecoder: { d in try B1PreWTDEffectiveDate(from: d) }))
        B1ClassMetadata.ComplexTypes.wtdFreight.registerFactory(ObjectFactory.with(create: { B1PreWTDFreight(withDefaults: false) }, createWithDecoder: { d in try B1PreWTDFreight(from: d) }))
        B1ClassMetadata.ComplexTypes.wtdItem.registerFactory(ObjectFactory.with(create: { B1PreWTDItem(withDefaults: false) }, createWithDecoder: { d in try B1PreWTDItem(from: d) }))
        B1ClassMetadata.ComplexTypes.wtdValueRange.registerFactory(ObjectFactory.with(create: { B1PreWTDValueRange(withDefaults: false) }, createWithDecoder: { d in try B1PreWTDValueRange(from: d) }))
        B1ClassMetadata.ComplexTypes.wtGroups.registerFactory(ObjectFactory.with(create: { B1PreWTGroups(withDefaults: false) }, createWithDecoder: { d in try B1PreWTGroups(from: d) }))
        B1ClassMetadata.ComplexTypes.warehouseLocationParams.registerFactory(ObjectFactory.with(create: { B1PreWarehouseLocationParams(withDefaults: false) }, createWithDecoder: { d in try B1PreWarehouseLocationParams(from: d) }))
        B1ClassMetadata.ComplexTypes.warehouseParams.registerFactory(ObjectFactory.with(create: { B1PreWarehouseParams(withDefaults: false) }, createWithDecoder: { d in try B1PreWarehouseParams(from: d) }))
        B1ClassMetadata.ComplexTypes.warehouseSublevelCodeParams.registerFactory(ObjectFactory.with(create: { B1PreWarehouseSublevelCodeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreWarehouseSublevelCodeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.weightMeasureParams.registerFactory(ObjectFactory.with(create: { B1PreWeightMeasureParams(withDefaults: false) }, createWithDecoder: { d in try B1PreWeightMeasureParams(from: d) }))
        B1ClassMetadata.ComplexTypes.withholdingTaxCertificatesData.registerFactory(ObjectFactory.with(create: { B1PreWithholdingTaxCertificatesData(withDefaults: false) }, createWithDecoder: { d in try B1PreWithholdingTaxCertificatesData(from: d) }))
        B1ClassMetadata.ComplexTypes.withholdingTaxCodeParams.registerFactory(ObjectFactory.with(create: { B1PreWithholdingTaxCodeParams(withDefaults: false) }, createWithDecoder: { d in try B1PreWithholdingTaxCodeParams(from: d) }))
        B1ClassMetadata.ComplexTypes.withholdingTaxCodesLine.registerFactory(ObjectFactory.with(create: { B1PreWithholdingTaxCodesLine(withDefaults: false) }, createWithDecoder: { d in try B1PreWithholdingTaxCodesLine(from: d) }))
        B1ClassMetadata.ComplexTypes.withholdingTaxCodesValueRangeLine.registerFactory(ObjectFactory.with(create: { B1PreWithholdingTaxCodesValueRangeLine(withDefaults: false) }, createWithDecoder: { d in try B1PreWithholdingTaxCodesValueRangeLine(from: d) }))
        B1ClassMetadata.ComplexTypes.withholdingTaxData.registerFactory(ObjectFactory.with(create: { B1PreWithholdingTaxData(withDefaults: false) }, createWithDecoder: { d in try B1PreWithholdingTaxData(from: d) }))
        B1ClassMetadata.ComplexTypes.withholdingTaxDataWTX.registerFactory(ObjectFactory.with(create: { B1PreWithholdingTaxDataWTX(withDefaults: false) }, createWithDecoder: { d in try B1PreWithholdingTaxDataWTX(from: d) }))
        B1ClassMetadata.ComplexTypes.withholdingTaxLine.registerFactory(ObjectFactory.with(create: { B1PreWithholdingTaxLine(withDefaults: false) }, createWithDecoder: { d in try B1PreWithholdingTaxLine(from: d) }))
        B1ClassMetadata.ComplexTypes.wizardPaymentMethodParams.registerFactory(ObjectFactory.with(create: { B1PreWizardPaymentMethodParams(withDefaults: false) }, createWithDecoder: { d in try B1PreWizardPaymentMethodParams(from: d) }))
        B1ClassMetadata.ComplexTypes.workflowApprovalTaskListParams.registerFactory(ObjectFactory.with(create: { B1PreWorkflowApprovalTaskListParams(withDefaults: false) }, createWithDecoder: { d in try B1PreWorkflowApprovalTaskListParams(from: d) }))
        B1ClassMetadata.ComplexTypes.workflowTask.registerFactory(ObjectFactory.with(create: { B1PreWorkflowTask(withDefaults: false) }, createWithDecoder: { d in try B1PreWorkflowTask(from: d) }))
        B1ClassMetadata.ComplexTypes.workflowTaskCompleteParams.registerFactory(ObjectFactory.with(create: { B1PreWorkflowTaskCompleteParams(withDefaults: false) }, createWithDecoder: { d in try B1PreWorkflowTaskCompleteParams(from: d) }))
        B1ClassMetadata.ComplexTypes.workflowTaskInputObject.registerFactory(ObjectFactory.with(create: { B1PreWorkflowTaskInputObject(withDefaults: false) }, createWithDecoder: { d in try B1PreWorkflowTaskInputObject(from: d) }))
        B1ClassMetadata.ComplexTypes.workflowTaskNote.registerFactory(ObjectFactory.with(create: { B1PreWorkflowTaskNote(withDefaults: false) }, createWithDecoder: { d in try B1PreWorkflowTaskNote(from: d) }))
        B1ClassMetadata.ComplexTypes.workflowTaskOutputObject.registerFactory(ObjectFactory.with(create: { B1PreWorkflowTaskOutputObject(withDefaults: false) }, createWithDecoder: { d in try B1PreWorkflowTaskOutputObject(from: d) }))
        B1ClassMetadata.EntityTypes.b1Session.registerFactory(ObjectFactory.with(create: { B1PreB1Session(withDefaults: false) }, createWithDecoder: { d in try B1PreB1Session(from: d) }))
        B1ClassMetadata.EntityTypes.document.registerFactory(ObjectFactory.with(create: { B1PreDocument(withDefaults: false) }, createWithDecoder: { d in try B1PreDocument(from: d) }))
        B1ClassStaticResolver.resolve()
    }
}
